{
  "ACL LOAD": {
    "summary": "Reload the ACLs from the configured ACL file",
    "complexity": "O(N). Where N is the number of configured users.",
    "since": "6.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply: `OK` on success.\n\nThe command may fail with an error for several reasons: if the file is not readable, if there is an error inside the file, and in such case the error will be reported to the user in the error. Finally the command will fail if the server is not configured to use an external ACL file.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ACL SAVE": {
    "summary": "Save the current ACL rules in the configured ACL file",
    "complexity": "O(N). Where N is the number of configured users.",
    "since": "6.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply: `OK` on success.\n\nThe command may fail with an error for several reasons: if the file cannot be written or if the server is not configured to use an external ACL file.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ACL LIST": {
    "summary": "List the current ACL rules in ACL config file format",
    "complexity": "O(N). Where N is the number of configured users.",
    "since": "6.0.0",
    "group": "server",
    "return_summary": "An array of strings.",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ACL USERS": {
    "summary": "List the username of all the configured ACL rules",
    "complexity": "O(N). Where N is the number of configured users.",
    "since": "6.0.0",
    "group": "server",
    "return_summary": "An array of strings.",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ACL GETUSER": {
    "summary": "Get the rules for a specific ACL user",
    "complexity": "O(N). Where N is the number of password, command and pattern rules that the user has.",
    "since": "6.0.0",
    "group": "server",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.2",
        "Added Pub/Sub channel patterns."
      ]
    ],
    "arguments": [
      {
        "name": "username",
        "type": "string"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ACL SETUSER": {
    "summary": "Modify or create the rules for a specific ACL user",
    "complexity": "O(N). Where N is the number of rules provided.",
    "since": "6.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply: `OK` on success.\n\nIf the rules contain errors, the error is returned.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.2",
        "Added Pub/Sub channel patterns."
      ]
    ],
    "arguments": [
      {
        "name": "username",
        "type": "string"
      },
      {
        "name": "rule",
        "type": "string",
        "multiple": true,
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ACL DELUSER": {
    "summary": "Remove the specified ACL users and the associated rules",
    "complexity": "O(1) amortized time considering the typical user.",
    "since": "6.0.0",
    "group": "server",
    "return_summary": "@integer-reply: The number of users that were deleted. This number will not always match the number of arguments since certain users may not exist.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "username",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ACL CAT": {
    "summary": "List the ACL categories or the commands inside a category",
    "complexity": "O(1) since the categories and commands are a fixed set.",
    "since": "6.0.0",
    "group": "server",
    "return_summary": "@array-reply: a list of ACL categories or a list of commands inside a given category. The command may return an error if an invalid category name is given as argument.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "categoryname",
        "type": "string",
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ACL GENPASS": {
    "summary": "Generate a pseudorandom secure password to use for ACL users",
    "complexity": "O(1)",
    "since": "6.0.0",
    "group": "server",
    "return_summary": "@bulk-string-reply: by default 64 bytes string representing 256 bits of pseudorandom data. Otherwise if an argument if needed, the output string length is the number of specified bits (rounded to the next multiple of 4) divided by 4.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "bits",
        "type": "integer",
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ACL WHOAMI": {
    "summary": "Return the name of the user associated to the current connection",
    "complexity": "O(1)",
    "since": "6.0.0",
    "group": "server",
    "return_summary": "@bulk-string-reply: the username of the current connection.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ACL LOG": {
    "summary": "List latest events denied because of ACLs in place",
    "complexity": "O(N) with N being the number of entries shown.",
    "since": "6.0.0",
    "group": "server",
    "return_summary": "When called to show security events:\n\n@array-reply: a list of ACL security events.\n\nWhen called with `RESET`:\n\n@simple-string-reply: `OK` if the security log was cleared.",
    "return_types": {
      "2": [
        "array-reply",
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "count or RESET",
        "type": "string",
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ACL HELP": {
    "summary": "Show helpful text about the different subcommands",
    "complexity": "O(1)",
    "since": "6.0.0",
    "group": "server",
    "return_summary": "@array-reply: a list of subcommands and their descriptions",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "APPEND": {
    "summary": "Append a value to a key",
    "complexity": "O(1). The amortized time complexity is O(1) assuming the appended value is small and the already present value is of any size, since the dynamic string library used by Redis will double the free space available on every reallocation.",
    "since": "2.0.0",
    "group": "string",
    "return_summary": "@integer-reply: the length of the string after the append operation.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "value",
        "type": "string"
      }
    ],
    "arity": 3,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "string",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "ASKING": {
    "summary": "Sent by cluster clients after an -ASK redirect",
    "complexity": "O(1)",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@simple-string-reply: `OK`.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [],
    "arity": 1,
    "command_flags": [
      "fast"
    ],
    "acl_categories": [
      "connection",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "AUTH": {
    "summary": "Authenticate to the server",
    "complexity": "TBD",
    "since": "1.0.0",
    "group": "connection",
    "return_summary": "@simple-string-reply or an error if the password, or username/password pair, is invalid.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.0.0",
        "Added ACL style (username and password)."
      ]
    ],
    "arguments": [
      {
        "name": "username",
        "type": "string",
        "optional": true
      },
      {
        "name": "password",
        "type": "string"
      }
    ],
    "arity": -2,
    "command_flags": [
      "no-auth",
      "no-script",
      "ok-loading",
      "ok-stale",
      "fast"
    ],
    "acl_categories": [
      "connection",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "BGREWRITEAOF": {
    "summary": "Asynchronously rewrite the append-only file",
    "complexity": "TBD",
    "since": "1.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply: A simple string reply indicating that the rewriting started or is about to start ASAP, when the call is executed with success.\n\nThe command may reply with an error in certain cases, as documented above.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": 1,
    "command_flags": [
      "admin",
      "no-script"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "BGSAVE": {
    "summary": "Asynchronously save the dataset to disk",
    "complexity": "TBD",
    "since": "1.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply: `Background saving started` if `BGSAVE` started correctly or `Background saving scheduled` when used with the `SCHEDULE` subcommand.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "3.2.2",
        "Added the `SCHEDULE` option."
      ]
    ],
    "arguments": [
      {
        "name": "schedule",
        "type": "enum",
        "enum": [
          "SCHEDULE"
        ],
        "optional": true
      }
    ],
    "arity": -1,
    "command_flags": [
      "admin",
      "no-script"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "BITCOUNT": {
    "summary": "Count set bits in a string",
    "complexity": "O(N)",
    "since": "2.6.0",
    "group": "bitmap",
    "return_summary": "@integer-reply\n\nThe number of bits set to 1.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": [
          "start",
          "end"
        ],
        "type": [
          "integer",
          "integer"
        ],
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "bitmap",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "BITFIELD": {
    "summary": "Perform arbitrary bitfield integer operations on strings",
    "complexity": "O(1) for each subcommand specified",
    "since": "3.2.0",
    "group": "bitmap",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "command": "GET",
        "name": [
          "type",
          "offset"
        ],
        "type": [
          "type",
          "integer"
        ],
        "optional": true
      },
      {
        "command": "SET",
        "name": [
          "type",
          "offset",
          "value"
        ],
        "type": [
          "type",
          "integer",
          "integer"
        ],
        "optional": true
      },
      {
        "command": "INCRBY",
        "name": [
          "type",
          "offset",
          "increment"
        ],
        "type": [
          "type",
          "integer",
          "integer"
        ],
        "optional": true
      },
      {
        "command": "OVERFLOW",
        "type": "enum",
        "enum": [
          "WRAP",
          "SAT",
          "FAIL"
        ],
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "bitmap",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "BITFIELD_RO": {
    "summary": "Perform arbitrary bitfield integer operations on strings. Read-only variant of BITFIELD",
    "complexity": "O(1) for each subcommand specified",
    "since": "6.2.0",
    "group": "bitmap",
    "return_summary": "@array-reply: An array with each entry being the corresponding result of the subcommand given at the same position.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "command": "GET",
        "name": [
          "type",
          "offset"
        ],
        "type": [
          "type",
          "integer"
        ]
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "bitmap",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "BITOP": {
    "summary": "Perform bitwise operations between strings",
    "complexity": "O(N)",
    "since": "2.6.0",
    "group": "bitmap",
    "return_summary": "@integer-reply\n\nThe size of the string stored in the destination key, that is equal to the\nsize of the longest input string.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "operation",
        "type": "string"
      },
      {
        "name": "destkey",
        "type": "key"
      },
      {
        "name": "key",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "bitmap",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "count": -1,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "BITPOS": {
    "summary": "Find first bit set or clear in a string",
    "complexity": "O(N)",
    "since": "2.8.7",
    "group": "bitmap",
    "return_summary": "@integer-reply\n\nThe command returns the position of the first bit set to 1 or 0 according to the request.\n\nIf we look for set bits (the bit argument is 1) and the string is empty or composed of just zero bytes, -1 is returned.\n\nIf we look for clear bits (the bit argument is 0) and the string only contains bit set to 1, the function returns the first bit not part of the string on the right. So if the string is three bytes set to the value `0xff` the command `BITPOS key 0` will return 24, since up to bit 23 all the bits are 1.\n\nBasically, the function considers the right of the string as padded with zeros if you look for clear bits and specify no range or the _start_ argument **only**.\n\nHowever, this behavior changes if you are looking for clear bits and specify a range with both __start__ and __end__. If no clear bit is found in the specified range, the function returns -1 as the user specified a clear range and there are no 0 bits in that range.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "bit",
        "type": "integer"
      },
      {
        "name": "index",
        "type": "block",
        "optional": true,
        "block": [
          {
            "name": "start",
            "type": "integer"
          },
          {
            "name": "end",
            "type": "integer",
            "optional": true
          }
        ]
      }
    ],
    "arity": -3,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "bitmap",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "BLPOP": {
    "summary": "Remove and get the first element in a list, or block until one is available",
    "complexity": "O(N) where N is the number of provided keys.",
    "since": "2.0.0",
    "group": "list",
    "return_summary": "@array-reply: specifically:\n\n* A `nil` multi-bulk when no element could be popped and the timeout expired.\n* A two-element multi-bulk with the first element being the name of the key\n  where an element was popped and the second element being the value of the\n  popped element.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.0",
        "`timeout` is interpreted as a double instead of an integer."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "multiple": true
      },
      {
        "name": "timeout",
        "type": "double"
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "no-script"
    ],
    "acl_categories": [
      "list",
      "blocking",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "BRPOP": {
    "summary": "Remove and get the last element in a list, or block until one is available",
    "complexity": "O(N) where N is the number of provided keys.",
    "since": "2.0.0",
    "group": "list",
    "return_summary": "@array-reply: specifically:\n\n* A `nil` multi-bulk when no element could be popped and the timeout expired.\n* A two-element multi-bulk with the first element being the name of the key\n  where an element was popped and the second element being the value of the\n  popped element.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.0",
        "`timeout` is interpreted as a double instead of an integer."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "multiple": true
      },
      {
        "name": "timeout",
        "type": "double"
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "no-script"
    ],
    "acl_categories": [
      "list",
      "blocking",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "BRPOPLPUSH": {
    "summary": "Pop an element from a list, push it to another list and return it; or block until one is available",
    "complexity": "O(1)",
    "since": "2.2.0",
    "group": "list",
    "return_summary": "@bulk-string-reply: the element being popped from `source` and pushed to `destination`.\nIf `timeout` is reached, a @nil-reply is returned.",
    "return_types": {
      "2": [
        "bulk-string-reply",
        "nil-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.0",
        "`timeout` is interpreted as a double instead of an integer."
      ]
    ],
    "deprecated": true,
    "arguments": [
      {
        "name": "source",
        "type": "key"
      },
      {
        "name": "destination",
        "type": "key"
      },
      {
        "name": "timeout",
        "type": "double"
      }
    ],
    "arity": 4,
    "command_flags": [
      "write",
      "use-memory",
      "no-script"
    ],
    "acl_categories": [
      "list",
      "blocking",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "BLMOVE": {
    "summary": "Pop an element from a list, push it to another list and return it; or block until one is available",
    "complexity": "O(1)",
    "since": "6.2.0",
    "group": "list",
    "return_summary": "@bulk-string-reply: the element being popped from `source` and pushed to `destination`.\nIf `timeout` is reached, a @nil-reply is returned.",
    "return_types": {
      "2": [
        "bulk-string-reply",
        "nil-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "deprecated": true,
    "arguments": [
      {
        "name": "source",
        "type": "key"
      },
      {
        "name": "destination",
        "type": "key"
      },
      {
        "name": "wherefrom",
        "type": "enum",
        "enum": [
          "LEFT",
          "RIGHT"
        ]
      },
      {
        "name": "whereto",
        "type": "enum",
        "enum": [
          "LEFT",
          "RIGHT"
        ]
      },
      {
        "name": "timeout",
        "type": "double"
      }
    ],
    "arity": 6,
    "command_flags": [
      "write",
      "use-memory",
      "no-script"
    ],
    "acl_categories": [
      "list",
      "blocking",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "LMPOP": {
    "summary": "Pop elements from a list",
    "complexity": "O(N+M) where N is the number of provided keys and M is the number of elements returned.",
    "since": "7.0.0",
    "group": "list",
    "return_summary": "@array-reply: specifically:\n\n* A `nil` when no element could be popped.\n* A two-element array with the first element being the name of the key from which elements were popped, and the second element is an array of elements.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "optional": true,
        "multiple": true
      },
      {
        "name": "where",
        "type": "enum",
        "enum": [
          "LEFT",
          "RIGHT"
        ]
      },
      {
        "command": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ]
  },
  "BLMPOP": {
    "summary": "Pop elements from a list, or block until one is available",
    "complexity": "O(N+M) where N is the number of provided keys and M is the number of elements returned.",
    "since": "7.0.0",
    "group": "list",
    "return_summary": "@array-reply: specifically:\n\n* A `nil` when no element could be popped, and timeout is reached.\n* A two-element array with the first element being the name of the key from which elements were popped, and the second element is an array of elements.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "timeout",
        "type": "double"
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "optional": true,
        "multiple": true
      },
      {
        "name": "where",
        "type": "enum",
        "enum": [
          "LEFT",
          "RIGHT"
        ]
      },
      {
        "command": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ]
  },
  "BZPOPMIN": {
    "summary": "Remove and return the member with the lowest score from one or more sorted sets, or block until one is available",
    "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
    "since": "5.0.0",
    "group": "sorted_set",
    "return_summary": "@array-reply: specifically:\n\n* A `nil` multi-bulk when no element could be popped and the timeout expired.\n* A three-element multi-bulk with the first element being the name of the key\n  where a member was popped, the second element is the popped member itself,\n  and the third element is the score of the popped element.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.0",
        "`timeout` is interpreted as a double instead of an integer."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "multiple": true
      },
      {
        "name": "timeout",
        "type": "double"
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "no-script",
      "fast"
    ],
    "acl_categories": [
      "sortedset",
      "blocking",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "BZPOPMAX": {
    "summary": "Remove and return the member with the highest score from one or more sorted sets, or block until one is available",
    "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
    "since": "5.0.0",
    "group": "sorted_set",
    "return_summary": "@array-reply: specifically:\n\n* A `nil` multi-bulk when no element could be popped and the timeout expired.\n* A three-element multi-bulk with the first element being the name of the key\n  where a member was popped, the second element is the popped member itself,\n  and the third element is the score of the popped element.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.0",
        "`timeout` is interpreted as a double instead of an integer."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "multiple": true
      },
      {
        "name": "timeout",
        "type": "double"
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "no-script",
      "fast"
    ],
    "acl_categories": [
      "sortedset",
      "blocking",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "CLIENT CACHING": {
    "summary": "Instruct the server about tracking or not keys in the next request",
    "complexity": "O(1)",
    "since": "6.0.0",
    "group": "connection",
    "return_summary": "@simple-string-reply: `OK` or an error if the argument is not yes or no.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "mode",
        "type": "enum",
        "enum": [
          "YES",
          "NO"
        ]
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "random",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "connection",
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLIENT ID": {
    "summary": "Returns the client ID for the current connection",
    "complexity": "O(1)",
    "since": "5.0.0",
    "group": "connection",
    "return_summary": "@integer-reply\n\nThe id of the client.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "random",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "connection",
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLIENT INFO": {
    "summary": "Returns information about the current client connection.",
    "complexity": "O(1)",
    "since": "6.2.0",
    "group": "connection",
    "return_summary": "@bulk-string-reply: a unique string, as described at the `CLIENT LIST` page, for the current client.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "random",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "connection",
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLIENT KILL": {
    "summary": "Kill the connection of a client",
    "complexity": "O(N) where N is the number of client connections",
    "since": "2.4.0",
    "group": "connection",
    "return_summary": "When called with the three arguments format:\n\n@simple-string-reply: `OK` if the connection exists and has been closed\n\nWhen called with the filter / value format:\n\n@integer-reply: the number of clients killed.",
    "return_types": {
      "2": [
        "simple-string-reply",
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "2.8.12",
        "Added new filter format. "
      ],
      [
        "2.8.12",
        "`ID` option."
      ],
      [
        "3.2",
        "Added `master` type in for `TYPE` option."
      ],
      [
        "5",
        "Replaced `slave` `TYPE` with `replica`. `slave` still supported for backward compatibility."
      ],
      [
        "6.2",
        "`LADDR` option."
      ]
    ],
    "arguments": [
      {
        "name": "ip:port",
        "type": "string",
        "optional": true
      },
      {
        "command": "ID",
        "name": "client-id",
        "type": "integer",
        "optional": true
      },
      {
        "command": "TYPE",
        "type": "enum",
        "enum": [
          "normal",
          "master",
          "slave",
          "pubsub"
        ],
        "optional": true
      },
      {
        "command": "USER",
        "name": "username",
        "type": "string",
        "optional": true
      },
      {
        "command": "ADDR",
        "name": "ip:port",
        "type": "string",
        "optional": true
      },
      {
        "command": "LADDR",
        "name": "ip:port",
        "type": "string",
        "optional": true
      },
      {
        "command": "SKIPME",
        "name": "yes/no",
        "type": "string",
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "random",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "connection",
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLIENT LIST": {
    "summary": "Get the list of client connections",
    "complexity": "O(N) where N is the number of client connections",
    "since": "2.4.0",
    "group": "connection",
    "return_summary": "@bulk-string-reply: a unique string, formatted as follows:\n\n* One client connection per line (separated by LF)\n* Each line is composed of a succession of `property=value` fields separated\n  by a space character.\n\nHere is the meaning of the fields:\n\n* `id`: an unique 64-bit client ID.\n* `name`: the name set by the client with `CLIENT SETNAME`\n* `addr`: address/port of the client\n* `laddr`: address/port of local address client connected to (bind address)\n* `fd`: file descriptor corresponding to the socket\n* `age`: total duration of the connection in seconds\n* `idle`: idle time of the connection in seconds\n* `flags`: client flags (see below)\n* `db`: current database ID\n* `sub`: number of channel subscriptions\n* `psub`: number of pattern matching subscriptions\n* `multi`: number of commands in a MULTI/EXEC context\n* `qbuf`: query buffer length (0 means no query pending)\n* `qbuf-free`: free space of the query buffer (0 means the buffer is full)\n* `obl`: output buffer length\n* `oll`: output list length (replies are queued in this list when the buffer is full)\n* `omem`: output buffer memory usage\n* `events`: file descriptor events (see below)\n* `cmd`: last command played\n* `argv-mem`: incomplete arguments for the next command (already extracted from query buffer)\n* `tot-mem`: total memory consumed by this client in its various buffers\n* `redir`: client id of current client tracking redirection\n* `user`: the authenticated username of the client\n\nThe client flags can be a combination of:\n\n```\nA: connection to be closed ASAP\nb: the client is waiting in a blocking operation\nc: connection to be closed after writing entire reply\nd: a watched keys has been modified - EXEC will fail\ni: the client is waiting for a VM I/O (deprecated)\nM: the client is a master\nN: no specific flag set\nO: the client is a client in MONITOR mode\nP: the client is a Pub/Sub subscriber\nr: the client is in readonly mode against a cluster node\nS: the client is a replica node connection to this instance\nu: the client is unblocked\nU: the client is connected via a Unix domain socket\nx: the client is in a MULTI/EXEC context\nt: the client enabled keys tracking in order to perform client side caching\nR: the client tracking target client is invalid\nB: the client enabled broadcast tracking mode \n```\n\nThe file descriptor events can be:\n\n```\nr: the client socket is readable (event loop)\nw: the client socket is writable (event loop)\n```",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "2.8.12",
        "Added unique client `id` field."
      ],
      [
        "5.0",
        "Added optional `TYPE` filter."
      ],
      [
        "6.2",
        "Added `laddr` field and the optional `ID` filter."
      ]
    ],
    "arguments": [
      {
        "command": "TYPE",
        "type": "enum",
        "enum": [
          "normal",
          "master",
          "replica",
          "pubsub"
        ],
        "optional": true
      },
      {
        "name": "id",
        "type": "block",
        "block": [
          {
            "command": "ID",
            "type": "command"
          },
          {
            "name": "client-id",
            "type": "integer",
            "multiple": true
          }
        ],
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "random",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "connection",
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLIENT GETNAME": {
    "summary": "Get the current connection name",
    "complexity": "O(1)",
    "since": "2.6.9",
    "group": "connection",
    "return_summary": "@bulk-string-reply: The connection name, or a null bulk reply if no name is set.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "random",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "connection",
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLIENT GETREDIR": {
    "summary": "Get tracking notifications redirection client ID if any",
    "complexity": "O(1)",
    "since": "6.0.0",
    "group": "connection",
    "return_summary": "@integer-reply: the ID of the client we are redirecting the notifications to. The command returns `-1` if client tracking is not enabled, or `0` if client tracking is enabled but we are not redirecting the notifications to any client.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "random",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "connection",
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLIENT UNPAUSE": {
    "summary": "Resume processing of clients that were paused",
    "complexity": "O(N) Where N is the number of paused clients",
    "since": "6.2.0",
    "group": "connection",
    "return_summary": "@simple-string-reply: The command returns `OK`",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "random",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "connection",
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLIENT PAUSE": {
    "summary": "Stop processing commands from clients for some time",
    "complexity": "O(1)",
    "since": "2.9.50",
    "group": "connection",
    "return_summary": "@simple-string-reply: The command returns OK or an error if the timeout is invalid.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "3.2.10",
        "Client pause prevents client pause and key eviction as well."
      ],
      [
        "6.2",
        "CLIENT PAUSE WRITE mode added along with the `mode` option."
      ]
    ],
    "arguments": [
      {
        "name": "timeout",
        "type": "integer"
      },
      {
        "name": "mode",
        "type": "enum",
        "optional": true,
        "enum": [
          "WRITE",
          "ALL"
        ]
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "random",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "connection",
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLIENT REPLY": {
    "summary": "Instruct the server whether to reply to commands",
    "complexity": "O(1)",
    "since": "3.2.0",
    "group": "connection",
    "return_summary": "When called with either `OFF` or `SKIP` subcommands, no reply is made. When called with `ON`:\n\n@simple-string-reply: `OK`.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "reply-mode",
        "type": "enum",
        "enum": [
          "ON",
          "OFF",
          "SKIP"
        ]
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "random",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "connection",
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLIENT SETNAME": {
    "summary": "Set the current connection name",
    "complexity": "O(1)",
    "since": "2.6.9",
    "group": "connection",
    "return_summary": "@simple-string-reply: `OK` if the connection name was successfully set.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "connection-name",
        "type": "string"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "random",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "connection",
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLIENT TRACKING": {
    "summary": "Enable or disable server assisted client side caching support",
    "complexity": "O(1). Some options may introduce additional complexity.",
    "since": "6.0.0",
    "group": "connection",
    "return_summary": "@simple-string-reply: `OK` if the connection was successfully put in tracking mode or if the tracking mode was successfully disabled. Otherwise an error is returned.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "status",
        "type": "enum",
        "enum": [
          "ON",
          "OFF"
        ]
      },
      {
        "command": "REDIRECT",
        "name": "client-id",
        "type": "integer",
        "optional": true
      },
      {
        "command": "PREFIX",
        "name": "prefix",
        "type": "string",
        "optional": true,
        "multiple": true
      },
      {
        "name": "BCAST",
        "type": "enum",
        "enum": [
          "BCAST"
        ],
        "optional": true
      },
      {
        "name": "OPTIN",
        "type": "enum",
        "enum": [
          "OPTIN"
        ],
        "optional": true
      },
      {
        "name": "OPTOUT",
        "type": "enum",
        "enum": [
          "OPTOUT"
        ],
        "optional": true
      },
      {
        "name": "NOLOOP",
        "type": "enum",
        "enum": [
          "NOLOOP"
        ],
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "random",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "connection",
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLIENT TRACKINGINFO": {
    "summary": "Return information about server assisted client side caching for the current connection",
    "complexity": "O(1)",
    "since": "6.2.0",
    "group": "connection",
    "return_summary": "@array-reply: a list of tracking information sections and their respective values, specifically:\n\n* **flags**: A list of tracking flags used by the connection. The flags and their meanings are as follows:\n  * `off`: The connection isn't using server assisted client side caching.\n  * `on`: Server assisted client side caching is enabled for the connection.\n  * `bcast`: The client uses broadcasting mode.\n  * `optin`: The client does not cache keys by default.\n  * `optout`: The client caches keys by default.\n  * `caching-yes`: The next command will cache keys (exists only together with `optin`).\n  * `caching-no`: The next command won't cache keys (exists only together with `optout`).\n  * `noloop`: The client isn't notified about keys modified by itself.\n  * `broken_redirect`: The client ID used for redirection isn't valid anymore.\n* **redirect**: The client ID used for notifications redirection, or -1 when none.\n* **prefixes**: A list of key prefixes for which notifications are sent to the client.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "random",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "connection",
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLIENT UNBLOCK": {
    "summary": "Unblock a client blocked in a blocking command from a different connection",
    "complexity": "O(log N) where N is the number of client connections",
    "since": "5.0.0",
    "group": "connection",
    "return_summary": "@integer-reply, specifically:\n\n* `1` if the client was unblocked successfully.\n* `0` if the client wasn't unblocked.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "client-id",
        "type": "integer"
      },
      {
        "name": "unblock-type",
        "type": "enum",
        "enum": [
          "TIMEOUT",
          "ERROR"
        ],
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "random",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "connection",
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER ADDSLOTS": {
    "summary": "Assign new hash slots to receiving node",
    "complexity": "O(N) where N is the total number of hash slot arguments",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@simple-string-reply: `OK` if the command was successful. Otherwise an error is returned.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "slot",
        "type": "integer",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER BUMPEPOCH": {
    "summary": "Advance the cluster config epoch",
    "complexity": "O(1)",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@simple-string-reply: `BUMPED` if the epoch was incremented, or `STILL` if the node already has the greatest config epoch in the cluster.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER COUNT-FAILURE-REPORTS": {
    "summary": "Return the number of failure reports active for a given node",
    "complexity": "O(N) where N is the number of failure reports",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@integer-reply: the number of active failure reports for the node.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "node-id",
        "type": "string"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER COUNTKEYSINSLOT": {
    "summary": "Return the number of local keys in the specified hash slot",
    "complexity": "O(1)",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@integer-reply: The number of keys in the specified hash slot, or an error if the hash slot is invalid.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "slot",
        "type": "integer"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER DELSLOTS": {
    "summary": "Set hash slots as unbound in receiving node",
    "complexity": "O(N) where N is the total number of hash slot arguments",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@simple-string-reply: `OK` if the command was successful. Otherwise\nan error is returned.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "slot",
        "type": "integer",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER FAILOVER": {
    "summary": "Forces a replica to perform a manual failover of its master.",
    "complexity": "O(1)",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@simple-string-reply: `OK` if the command was accepted and a manual failover is going to be attempted. An error if the operation cannot be executed, for example if we are talking with a node which is already a master.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "options",
        "type": "enum",
        "enum": [
          "FORCE",
          "TAKEOVER"
        ],
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER FLUSHSLOTS": {
    "summary": "Delete a node's own slots information",
    "complexity": "O(1)",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@simple-string-reply: `OK`",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER FORGET": {
    "summary": "Remove a node from the nodes table",
    "complexity": "O(1)",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@simple-string-reply: `OK` if the command was executed successfully, otherwise an error is returned.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "node-id",
        "type": "string"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER GETKEYSINSLOT": {
    "summary": "Return local key names in the specified hash slot",
    "complexity": "O(log(N)) where N is the number of requested keys",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@array-reply: From 0 to *count* key names in a Redis array reply.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "slot",
        "type": "integer"
      },
      {
        "name": "count",
        "type": "integer"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER INFO": {
    "summary": "Provides info about Redis Cluster node state",
    "complexity": "O(1)",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@bulk-string-reply: A map between named fields and values in the form of `<field>:<value>` lines separated by newlines composed by the two bytes `CRLF`.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER KEYSLOT": {
    "summary": "Returns the hash slot of the specified key",
    "complexity": "O(N) where N is the number of bytes in the key",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@integer-reply: The hash slot number.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "string"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER MEET": {
    "summary": "Force a node cluster to handshake with another node",
    "complexity": "O(1)",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@simple-string-reply: `OK` if the command was successful. If the address or port specified are invalid an error is returned.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "ip",
        "type": "string"
      },
      {
        "name": "port",
        "type": "integer"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER MYID": {
    "summary": "Return the node id",
    "complexity": "O(1)",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@bulk-string-reply: The node id.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER NODES": {
    "summary": "Get Cluster config for the node",
    "complexity": "O(N) where N is the total number of Cluster nodes",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@bulk-string-reply: The serialized cluster configuration.\n\n**A note about the word slave used in this man page and command name**: Starting with Redis 5, if not for backward compatibility, the Redis project no longer uses the word slave. Unfortunately in this command the word slave is part of the protocol, so we'll be able to remove such occurrences only when this API will be naturally deprecated.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER REPLICATE": {
    "summary": "Reconfigure a node as a replica of the specified master node",
    "complexity": "O(1)",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@simple-string-reply: `OK` if the command was executed successfully, otherwise an error is returned.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "node-id",
        "type": "string"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER RESET": {
    "summary": "Reset a Redis Cluster node",
    "complexity": "O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@simple-string-reply: `OK` if the command was successful. Otherwise an error is returned.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "reset-type",
        "type": "enum",
        "enum": [
          "HARD",
          "SOFT"
        ],
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER SAVECONFIG": {
    "summary": "Forces the node to save cluster state on disk",
    "complexity": "O(1)",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@simple-string-reply: `OK` or an error if the operation fails.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER SET-CONFIG-EPOCH": {
    "summary": "Set the configuration epoch in a new node",
    "complexity": "O(1)",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@simple-string-reply: `OK` if the command was executed successfully, otherwise an error is returned.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "config-epoch",
        "type": "integer"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER SETSLOT": {
    "summary": "Bind a hash slot to a specific node",
    "complexity": "O(1)",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@simple-string-reply: All the subcommands return `OK` if the command was successful. Otherwise an error is returned.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "slot",
        "type": "integer"
      },
      {
        "name": "subcommand",
        "type": "enum",
        "enum": [
          "IMPORTING",
          "MIGRATING",
          "STABLE",
          "NODE"
        ]
      },
      {
        "name": "node-id",
        "type": "string",
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER SLAVES": {
    "summary": "List replica nodes of the specified master node",
    "complexity": "O(1)",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "The command returns data in the same format as `CLUSTER NODES`.",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "node-id",
        "type": "string"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER REPLICAS": {
    "summary": "List replica nodes of the specified master node",
    "complexity": "O(1)",
    "since": "5.0.0",
    "group": "cluster",
    "return_summary": "The command returns data in the same format as `CLUSTER NODES`.",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "node-id",
        "type": "string"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CLUSTER SLOTS": {
    "summary": "Get array of Cluster slot to node mappings",
    "complexity": "O(N) where N is the total number of Cluster nodes",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@array-reply: nested list of slot ranges with IP/Port mappings.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "COMMAND": {
    "summary": "Get array of Redis command details",
    "complexity": "O(N) where N is the total number of Redis commands",
    "since": "2.8.13",
    "group": "server",
    "return_summary": "@array-reply: nested list of command details.  Commands are returned\nin random order.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -1,
    "command_flags": [
      "ok-loading",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "connection",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "COMMAND COUNT": {
    "summary": "Get total number of Redis commands",
    "complexity": "O(1)",
    "since": "2.8.13",
    "group": "server",
    "return_summary": "@integer-reply: number of commands returned by `COMMAND`",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -1,
    "command_flags": [
      "ok-loading",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "connection",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "COMMAND GETKEYS": {
    "summary": "Extract keys given a full Redis command",
    "complexity": "O(N) where N is the number of arguments to the command",
    "since": "2.8.13",
    "group": "server",
    "return_summary": "@array-reply: list of keys from your command.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -1,
    "command_flags": [
      "ok-loading",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "connection",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "COMMAND INFO": {
    "summary": "Get array of specific Redis command details",
    "complexity": "O(N) when N is number of commands to look up",
    "since": "2.8.13",
    "group": "server",
    "return_summary": "@array-reply: nested list of command details.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "command-name",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -1,
    "command_flags": [
      "ok-loading",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "connection",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CONFIG GET": {
    "summary": "Get the value of a configuration parameter",
    "complexity": "TBD",
    "since": "2.0.0",
    "group": "server",
    "return_summary": "The return type of the command is a @array-reply.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "parameter",
        "type": "string"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-loading",
      "ok-stale",
      "no-script"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CONFIG REWRITE": {
    "summary": "Rewrite the configuration file with the in memory configuration",
    "complexity": "TBD",
    "since": "2.8.0",
    "group": "server",
    "return_summary": "@simple-string-reply: `OK` when the configuration was rewritten properly.\nOtherwise an error is returned.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-loading",
      "ok-stale",
      "no-script"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CONFIG SET": {
    "summary": "Set a configuration parameter to the given value",
    "complexity": "TBD",
    "since": "2.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply: `OK` when the configuration was set properly.\nOtherwise an error is returned.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "parameter",
        "type": "string"
      },
      {
        "name": "value",
        "type": "string"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-loading",
      "ok-stale",
      "no-script"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "CONFIG RESETSTAT": {
    "summary": "Reset the stats returned by INFO",
    "complexity": "O(1)",
    "since": "2.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply: always `OK`.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "ok-loading",
      "ok-stale",
      "no-script"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "COPY": {
    "summary": "Copy a key",
    "complexity": "O(N) worst case for collections, where N is the number of nested items. O(1) for string values.",
    "since": "6.2.0",
    "group": "generic",
    "return_summary": "@integer-reply, specifically:\n\n* `1` if `source` was copied.\n* `0` if `source` was not copied.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "source",
        "type": "key"
      },
      {
        "name": "destination",
        "type": "key"
      },
      {
        "command": "DB",
        "name": "destination-db",
        "type": "integer",
        "optional": true
      },
      {
        "name": "replace",
        "type": "enum",
        "enum": [
          "REPLACE"
        ],
        "optional": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "keyspace",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "DBSIZE": {
    "summary": "Return the number of keys in the selected database",
    "complexity": "TBD",
    "since": "1.0.0",
    "group": "server",
    "return_summary": "@integer-reply",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": 1,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "keyspace",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "DEBUG OBJECT": {
    "summary": "Get debugging information about a key",
    "complexity": "TBD",
    "since": "1.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "DEBUG SEGFAULT": {
    "summary": "Make the server crash",
    "complexity": "TBD",
    "since": "1.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "DECR": {
    "summary": "Decrement the integer value of a key by one",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "string",
    "return_summary": "@integer-reply: the value of `key` after the decrement",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "string",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "DECRBY": {
    "summary": "Decrement the integer value of a key by the given number",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "string",
    "return_summary": "@integer-reply: the value of `key` after the decrement",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "decrement",
        "type": "integer"
      }
    ],
    "arity": 3,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "string",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "DEL": {
    "summary": "Delete a key",
    "complexity": "O(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1).",
    "since": "1.0.0",
    "group": "generic",
    "return_summary": "@integer-reply: The number of keys that were removed.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "write"
    ],
    "acl_categories": [
      "keyspace",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "DISCARD": {
    "summary": "Discard all commands issued after MULTI",
    "complexity": "TBD",
    "since": "2.0.0",
    "group": "transactions",
    "return_summary": "@simple-string-reply: always `OK`.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": 1,
    "command_flags": [
      "no-script",
      "fast",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "transaction",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "DUMP": {
    "summary": "Return a serialized version of the value stored at the specified key.",
    "complexity": "O(1) to access the key and additional O(N*M) to serialize it, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1).",
    "since": "2.6.0",
    "group": "generic",
    "return_summary": "@bulk-string-reply: the serialized value.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "random"
    ],
    "acl_categories": [
      "keyspace",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ECHO": {
    "summary": "Echo the given string",
    "complexity": "TBD",
    "since": "1.0.0",
    "group": "connection",
    "return_summary": "@bulk-string-reply",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "message",
        "type": "string"
      }
    ],
    "arity": 2,
    "command_flags": [
      "fast"
    ],
    "acl_categories": [
      "connection",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "EVAL": {
    "summary": "Execute a Lua script server side",
    "complexity": "Depends on the script that is executed.",
    "since": "2.6.0",
    "group": "scripting",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "script",
        "type": "string"
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "optional": true,
        "multiple": true
      },
      {
        "name": "arg",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "no-script",
      "no-monitor",
      "may-replicate"
    ],
    "acl_categories": [
      "scripting",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "EVAL_RO": {
    "summary": "Execute a read-only Lua script server side",
    "complexity": "Depends on the script that is executed.",
    "since": "7.0.0",
    "group": "scripting",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "script",
        "type": "string"
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "multiple": true
      },
      {
        "name": "arg",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "no-script",
      "no-monitor"
    ],
    "acl_categories": [
      "scripting",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "EVALSHA": {
    "summary": "Execute a Lua script server side",
    "complexity": "Depends on the script that is executed.",
    "since": "2.6.0",
    "group": "scripting",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "sha1",
        "type": "string"
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "optional": true,
        "multiple": true
      },
      {
        "name": "arg",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "no-script",
      "no-monitor",
      "may-replicate"
    ],
    "acl_categories": [
      "scripting",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "EVALSHA_RO": {
    "summary": "Execute a read-only Lua script server side",
    "complexity": "Depends on the script that is executed.",
    "since": "7.0.0",
    "group": "scripting",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "sha1",
        "type": "string"
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "multiple": true
      },
      {
        "name": "arg",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "no-script",
      "no-monitor"
    ],
    "acl_categories": [
      "scripting",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "EXEC": {
    "summary": "Execute all commands issued after MULTI",
    "complexity": "TBD",
    "since": "1.2.0",
    "group": "transactions",
    "return_summary": "@array-reply: each element being the reply to each of the commands in the\natomic transaction.\n\nWhen using `WATCH`, `EXEC` can return a @nil-reply if the execution was aborted.",
    "return_types": {
      "2": [
        "array-reply",
        "nil-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": 1,
    "command_flags": [
      "no-script",
      "no-slowlog",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "transaction",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "EXISTS": {
    "summary": "Determine if a key exists",
    "complexity": "O(N) where N is the number of keys to check.",
    "since": "1.0.0",
    "group": "generic",
    "return_summary": "@integer-reply, specifically:\n\n* `1` if the key exists.\n* `0` if the key does not exist.\n\nSince Redis 3.0.3 the command accepts a variable number of keys and the return value is generalized:\n\n* The number of keys existing among the ones specified as arguments. Keys mentioned multiple times and existing are counted multiple times.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "keyspace",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "EXPIRE": {
    "summary": "Set a key's time to live in seconds",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "generic",
    "return_summary": "@integer-reply, specifically:\n\n* `1` if the timeout was set.\n* `0` if the timeout was not set. e.g. key doesn't exist, or operation skipped due to the provided arguments.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "7.0",
        "Added options: `NX`, `XX`, `GT` and `LT`."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "seconds",
        "type": "integer"
      },
      {
        "name": "condition",
        "type": "enum",
        "enum": [
          "NX",
          "XX",
          "GT",
          "LT"
        ],
        "optional": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "keyspace",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "EXPIREAT": {
    "summary": "Set the expiration for a key as a UNIX timestamp",
    "complexity": "O(1)",
    "since": "1.2.0",
    "group": "generic",
    "return_summary": "@integer-reply, specifically:\n\n* `1` if the timeout was set.\n* `0` if the timeout was not set. e.g. key doesn't exist, or operation skipped due to the provided arguments.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "7.0",
        "Added options: `NX`, `XX`, `GT` and `LT`."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "timestamp",
        "type": "posix time"
      },
      {
        "name": "condition",
        "type": "enum",
        "enum": [
          "NX",
          "XX",
          "GT",
          "LT"
        ],
        "optional": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "keyspace",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "EXPIRETIME": {
    "summary": "Get the expiration Unix timestamp for a key",
    "complexity": "O(1)",
    "since": "7.0.0",
    "group": "generic",
    "return_summary": "@integer-reply: Expiration Unix timestamp in seconds, or a negative value in order to signal an error (see the description below).\n* The command returns `-1` if the key exists but has no associated expiration time.\n* The command returns `-2` if the key does not exist.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "fast",
      "random"
    ],
    "acl_categories": [
      "keyspace",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "FAILOVER": {
    "summary": "Start a coordinated failover between this server and one of its replicas.",
    "complexity": "TBD",
    "since": "6.2.0",
    "group": "server",
    "return_summary": "@simple-string-reply: `OK` if the command was accepted and a coordinated failover is in progress. An error if the operation cannot be executed.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "target",
        "type": "block",
        "optional": true,
        "block": [
          {
            "command": "TO",
            "type": "command"
          },
          {
            "name": "host",
            "type": "string"
          },
          {
            "name": "port",
            "type": "integer"
          },
          {
            "command": "FORCE",
            "type": "command",
            "optional": true
          }
        ]
      },
      {
        "command": "ABORT",
        "type": "command",
        "optional": true
      },
      {
        "command": "TIMEOUT",
        "name": "milliseconds",
        "type": "integer",
        "optional": true
      }
    ],
    "arity": -1,
    "command_flags": [
      "admin",
      "no-script",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "FLUSHALL": {
    "summary": "Remove all keys from all databases",
    "complexity": "O(N) where N is the total number of keys in all databases",
    "since": "1.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "4.0.0",
        "Added the `ASYNC` flushing mode modifier."
      ],
      [
        "6.2.0",
        "Added the `!SYNC` flushing mode modifier and the **lazyfree-lazy-user-flush** configuration directive."
      ]
    ],
    "arguments": [
      {
        "name": "async",
        "type": "enum",
        "enum": [
          "ASYNC",
          "SYNC"
        ],
        "optional": true
      }
    ],
    "arity": -1,
    "command_flags": [
      "write"
    ],
    "acl_categories": [
      "keyspace",
      "dangerous",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "FLUSHDB": {
    "summary": "Remove all keys from the current database",
    "complexity": "O(N) where N is the number of keys in the selected database",
    "since": "1.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "async",
        "type": "enum",
        "enum": [
          "ASYNC",
          "SYNC"
        ],
        "optional": true
      }
    ],
    "arity": -1,
    "command_flags": [
      "write"
    ],
    "acl_categories": [
      "keyspace",
      "dangerous",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "GEOADD": {
    "summary": "Add one or more geospatial items in the geospatial index represented using a sorted set",
    "complexity": "O(log(N)) for each item added, where N is the number of elements in the sorted set.",
    "since": "3.2.0",
    "group": "geo",
    "return_summary": "@integer-reply, specifically:\n\n* When used without optional arguments, the number of elements added to the sorted set (excluding score updates).\n* If the `CH` option is specified, the number of elements that were changed (added or updated).",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.2",
        "Added the `CH`, `NX` and `XX` options."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "condition",
        "type": "enum",
        "enum": [
          "NX",
          "XX"
        ],
        "optional": true
      },
      {
        "name": "change",
        "type": "enum",
        "enum": [
          "CH"
        ],
        "optional": true
      },
      {
        "name": [
          "longitude",
          "latitude",
          "member"
        ],
        "type": [
          "double",
          "double",
          "string"
        ],
        "multiple": true
      }
    ],
    "arity": -5,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "geo",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "GEOHASH": {
    "summary": "Returns members of a geospatial index as standard geohash strings",
    "complexity": "O(log(N)) for each member requested, where N is the number of elements in the sorted set.",
    "since": "3.2.0",
    "group": "geo",
    "return_summary": "@array-reply, specifically:\n\nThe command returns an array where each element is the Geohash corresponding to\neach member name passed as argument to the command.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "member",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "geo",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "GEOPOS": {
    "summary": "Returns longitude and latitude of members of a geospatial index",
    "complexity": "O(N) where N is the number of members requested.",
    "since": "3.2.0",
    "group": "geo",
    "return_summary": "@array-reply, specifically:\n\nThe command returns an array where each element is a two elements array\nrepresenting longitude and latitude (x,y) of each member name passed as\nargument to the command.\n\nNon existing elements are reported as NULL elements of the array.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "member",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "geo",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "GEODIST": {
    "summary": "Returns the distance between two members of a geospatial index",
    "complexity": "O(log(N))",
    "since": "3.2.0",
    "group": "geo",
    "return_summary": "@bulk-string-reply, specifically:\n\nThe command returns the distance as a double (represented as a string)\nin the specified unit, or NULL if one or both the elements are missing.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "member1",
        "type": "string"
      },
      {
        "name": "member2",
        "type": "string"
      },
      {
        "name": "unit",
        "type": "enum",
        "enum": [
          "m",
          "km",
          "ft",
          "mi"
        ],
        "optional": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "geo",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "GEORADIUS": {
    "summary": "Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a point",
    "complexity": "O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.",
    "since": "3.2.0",
    "group": "geo",
    "return_summary": "@array-reply, specifically:\n\n* Without any `WITH` option specified, the command just returns a linear array like [\"New York\",\"Milan\",\"Paris\"].\n* If `WITHCOORD`, `WITHDIST` or `WITHHASH` options are specified, the command returns an array of arrays, where each sub-array represents a single item.\n\nWhen additional information is returned as an array of arrays for each item, the first item in the sub-array is always the name of the returned item. The other information is returned in the following order as successive elements of the sub-array.\n\n1. The distance from the center as a floating point number, in the same unit specified in the radius.\n2. The geohash integer.\n3. The coordinates as a two items x,y array (longitude,latitude).\n\nSo for example the command `GEORADIUS Sicily 15 37 200 km WITHCOORD WITHDIST` will return each item in the following way:\n\n    [\"Palermo\",\"190.4424\",[\"13.361389338970184\",\"38.115556395496299\"]]",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.2",
        "Added the `ANY` option for `COUNT`."
      ]
    ],
    "deprecated": true,
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "longitude",
        "type": "double"
      },
      {
        "name": "latitude",
        "type": "double"
      },
      {
        "name": "radius",
        "type": "double"
      },
      {
        "name": "unit",
        "type": "enum",
        "enum": [
          "m",
          "km",
          "ft",
          "mi"
        ]
      },
      {
        "name": "withcoord",
        "type": "enum",
        "enum": [
          "WITHCOORD"
        ],
        "optional": true
      },
      {
        "name": "withdist",
        "type": "enum",
        "enum": [
          "WITHDIST"
        ],
        "optional": true
      },
      {
        "name": "withhash",
        "type": "enum",
        "enum": [
          "WITHHASH"
        ],
        "optional": true
      },
      {
        "type": "block",
        "name": "count",
        "block": [
          {
            "name": "count",
            "command": "COUNT",
            "type": "integer"
          },
          {
            "name": "any",
            "type": "enum",
            "enum": [
              "ANY"
            ],
            "optional": true
          }
        ],
        "optional": true
      },
      {
        "name": "order",
        "type": "enum",
        "enum": [
          "ASC",
          "DESC"
        ],
        "optional": true
      },
      {
        "command": "STORE",
        "name": "key",
        "type": "key",
        "optional": true
      },
      {
        "command": "STOREDIST",
        "name": "key",
        "type": "key",
        "optional": true
      }
    ],
    "arity": -6,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "geo",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "GEORADIUSBYMEMBER": {
    "summary": "Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a member",
    "complexity": "O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.",
    "since": "3.2.0",
    "group": "geo",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "deprecated": true,
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "member",
        "type": "string"
      },
      {
        "name": "radius",
        "type": "double"
      },
      {
        "name": "unit",
        "type": "enum",
        "enum": [
          "m",
          "km",
          "ft",
          "mi"
        ]
      },
      {
        "name": "withcoord",
        "type": "enum",
        "enum": [
          "WITHCOORD"
        ],
        "optional": true
      },
      {
        "name": "withdist",
        "type": "enum",
        "enum": [
          "WITHDIST"
        ],
        "optional": true
      },
      {
        "name": "withhash",
        "type": "enum",
        "enum": [
          "WITHHASH"
        ],
        "optional": true
      },
      {
        "type": "block",
        "name": "count",
        "block": [
          {
            "name": "count",
            "command": "COUNT",
            "type": "integer"
          },
          {
            "name": "any",
            "type": "enum",
            "enum": [
              "ANY"
            ],
            "optional": true
          }
        ],
        "optional": true
      },
      {
        "name": "order",
        "type": "enum",
        "enum": [
          "ASC",
          "DESC"
        ],
        "optional": true
      },
      {
        "command": "STORE",
        "name": "key",
        "type": "key",
        "optional": true
      },
      {
        "command": "STOREDIST",
        "name": "key",
        "type": "key",
        "optional": true
      }
    ],
    "arity": -5,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "geo",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "GEOSEARCH": {
    "summary": "Query a sorted set representing a geospatial index to fetch members inside an area of a box or a circle.",
    "complexity": "O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape",
    "since": "6.2",
    "group": "geo",
    "return_summary": "@array-reply, specifically:\n\n* Without any `WITH` option specified, the command just returns a linear array like [\"New York\",\"Milan\",\"Paris\"].\n* If `WITHCOORD`, `WITHDIST` or `WITHHASH` options are specified, the command returns an array of arrays, where each sub-array represents a single item.\n\nWhen additional information is returned as an array of arrays for each item, the first item in the sub-array is always the name of the returned item. The other information is returned in the following order as successive elements of the sub-array.\n\n1. The distance from the center as a floating point number, in the same unit specified in the shape.\n2. The geohash integer.\n3. The coordinates as a two items x,y array (longitude,latitude).",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "deprecated": true,
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "command": "FROMMEMBER",
        "name": "member",
        "type": "string",
        "optional": true
      },
      {
        "command": "FROMLONLAT",
        "name": [
          "longitude",
          "latitude"
        ],
        "type": [
          "double",
          "double"
        ],
        "optional": true
      },
      {
        "type": "block",
        "name": "circle",
        "block": [
          {
            "name": "radius",
            "command": "BYRADIUS",
            "type": "double"
          },
          {
            "name": "unit",
            "type": "enum",
            "enum": [
              "m",
              "km",
              "ft",
              "mi"
            ]
          }
        ],
        "optional": true
      },
      {
        "type": "block",
        "name": "box",
        "block": [
          {
            "name": "width",
            "command": "BYBOX",
            "type": "double"
          },
          {
            "name": "height",
            "type": "double"
          },
          {
            "name": "unit",
            "type": "enum",
            "enum": [
              "m",
              "km",
              "ft",
              "mi"
            ]
          }
        ],
        "optional": true
      },
      {
        "name": "order",
        "type": "enum",
        "enum": [
          "ASC",
          "DESC"
        ],
        "optional": true
      },
      {
        "type": "block",
        "name": "count",
        "block": [
          {
            "name": "count",
            "command": "COUNT",
            "type": "integer"
          },
          {
            "name": "any",
            "type": "enum",
            "enum": [
              "ANY"
            ],
            "optional": true
          }
        ],
        "optional": true
      },
      {
        "name": "withcoord",
        "type": "enum",
        "enum": [
          "WITHCOORD"
        ],
        "optional": true
      },
      {
        "name": "withdist",
        "type": "enum",
        "enum": [
          "WITHDIST"
        ],
        "optional": true
      },
      {
        "name": "withhash",
        "type": "enum",
        "enum": [
          "WITHHASH"
        ],
        "optional": true
      }
    ],
    "arity": -7,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "geo",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "GEOSEARCHSTORE": {
    "summary": "Query a sorted set representing a geospatial index to fetch members inside an area of a box or a circle, and store the result in another key.",
    "complexity": "O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape",
    "since": "6.2",
    "group": "geo",
    "return_summary": "@integer-reply: the number of elements in the resulting set.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "deprecated": true,
    "arguments": [
      {
        "name": "destination",
        "type": "key"
      },
      {
        "name": "source",
        "type": "key"
      },
      {
        "command": "FROMMEMBER",
        "name": "member",
        "type": "string",
        "optional": true
      },
      {
        "command": "FROMLONLAT",
        "name": [
          "longitude",
          "latitude"
        ],
        "type": [
          "double",
          "double"
        ],
        "optional": true
      },
      {
        "type": "block",
        "name": "circle",
        "block": [
          {
            "name": "radius",
            "command": "BYRADIUS",
            "type": "double"
          },
          {
            "name": "unit",
            "type": "enum",
            "enum": [
              "m",
              "km",
              "ft",
              "mi"
            ]
          }
        ],
        "optional": true
      },
      {
        "type": "block",
        "name": "box",
        "block": [
          {
            "name": "width",
            "command": "BYBOX",
            "type": "double"
          },
          {
            "name": "height",
            "type": "double"
          },
          {
            "name": "unit",
            "type": "enum",
            "enum": [
              "m",
              "km",
              "ft",
              "mi"
            ]
          }
        ],
        "optional": true
      },
      {
        "name": "order",
        "type": "enum",
        "enum": [
          "ASC",
          "DESC"
        ],
        "optional": true
      },
      {
        "type": "block",
        "name": "count",
        "block": [
          {
            "name": "count",
            "command": "COUNT",
            "type": "integer"
          },
          {
            "name": "any",
            "type": "enum",
            "enum": [
              "ANY"
            ],
            "optional": true
          }
        ],
        "optional": true
      },
      {
        "name": "storedist",
        "type": "enum",
        "enum": [
          "STOREDIST"
        ],
        "optional": true
      }
    ],
    "arity": -8,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "geo",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "GET": {
    "summary": "Get the value of a key",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "string",
    "return_summary": "@bulk-string-reply: the value of `key`, or `nil` when `key` does not exist.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "string",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "GETBIT": {
    "summary": "Returns the bit value at offset in the string value stored at key",
    "complexity": "O(1)",
    "since": "2.2.0",
    "group": "bitmap",
    "return_summary": "@integer-reply: the bit value stored at _offset_.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "offset",
        "type": "integer"
      }
    ],
    "arity": 3,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "bitmap",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "GETDEL": {
    "summary": "Get the value of a key and delete the key",
    "complexity": "O(1)",
    "since": "6.2.0",
    "group": "string",
    "return_summary": "@bulk-string-reply: the value of `key`, `nil` when `key` does not exist, or an error if the key's value type isn't a string.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "string",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "GETEX": {
    "summary": "Get the value of a key and optionally set its expiration",
    "complexity": "O(1)",
    "since": "6.2.0",
    "group": "string",
    "return_summary": "@bulk-string-reply: the value of `key`, or `nil` when `key` does not exist.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "expiration",
        "type": "enum",
        "enum": [
          "EX seconds",
          "PX milliseconds",
          "EXAT timestamp",
          "PXAT milliseconds-timestamp",
          "PERSIST"
        ],
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "string",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "GETRANGE": {
    "summary": "Get a substring of the string stored at a key",
    "complexity": "O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.",
    "since": "2.4.0",
    "group": "string",
    "return_summary": "@bulk-string-reply",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "start",
        "type": "integer"
      },
      {
        "name": "end",
        "type": "integer"
      }
    ],
    "arity": 4,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "string",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "GETSET": {
    "summary": "Set the string value of a key and return its old value",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "string",
    "return_summary": "@bulk-string-reply: the old value stored at `key`, or `nil` when `key` did not exist.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "deprecated": true,
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "value",
        "type": "string"
      }
    ],
    "arity": 3,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "string",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "HDEL": {
    "summary": "Delete one or more hash fields",
    "complexity": "O(N) where N is the number of fields to be removed.",
    "since": "2.0.0",
    "group": "hash",
    "return_summary": "@integer-reply: the number of fields that were removed from the hash, not\nincluding specified but non existing fields.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "field",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "hash",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "HELLO": {
    "summary": "Handshake with Redis",
    "complexity": "O(1)",
    "since": "6.0.0",
    "group": "connection",
    "return_summary": "@array-reply: a list of server properties. The reply is a map instead of an array when RESP3 is selected. The command returns an error if the `protover` requested does not exist.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.2",
        "`protover` made optional; when called without arguments the command reports the current connection's context."
      ]
    ],
    "arguments": [
      {
        "name": "arguments",
        "type": "block",
        "block": [
          {
            "name": "protover",
            "type": "integer"
          },
          {
            "command": "AUTH",
            "name": [
              "username",
              "password"
            ],
            "type": [
              "string",
              "string"
            ],
            "optional": true
          },
          {
            "command": "SETNAME",
            "name": "clientname",
            "type": "string",
            "optional": true
          }
        ],
        "optional": true
      }
    ],
    "arity": -1,
    "command_flags": [
      "no-auth",
      "no-script",
      "fast",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "connection",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "HEXISTS": {
    "summary": "Determine if a hash field exists",
    "complexity": "O(1)",
    "since": "2.0.0",
    "group": "hash",
    "return_summary": "@integer-reply, specifically:\n\n* `1` if the hash contains `field`.\n* `0` if the hash does not contain `field`, or `key` does not exist.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "field",
        "type": "string"
      }
    ],
    "arity": 3,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "hash",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "HGET": {
    "summary": "Get the value of a hash field",
    "complexity": "O(1)",
    "since": "2.0.0",
    "group": "hash",
    "return_summary": "@bulk-string-reply: the value associated with `field`, or `nil` when `field` is not\npresent in the hash or `key` does not exist.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "field",
        "type": "string"
      }
    ],
    "arity": 3,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "hash",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "HGETALL": {
    "summary": "Get all the fields and values in a hash",
    "complexity": "O(N) where N is the size of the hash.",
    "since": "2.0.0",
    "group": "hash",
    "return_summary": "@array-reply: list of fields and their values stored in the hash, or an\nempty list when `key` does not exist.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "random"
    ],
    "acl_categories": [
      "hash",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "HINCRBY": {
    "summary": "Increment the integer value of a hash field by the given number",
    "complexity": "O(1)",
    "since": "2.0.0",
    "group": "hash",
    "return_summary": "@integer-reply: the value at `field` after the increment operation.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "field",
        "type": "string"
      },
      {
        "name": "increment",
        "type": "integer"
      }
    ],
    "arity": 4,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "hash",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "HINCRBYFLOAT": {
    "summary": "Increment the float value of a hash field by the given amount",
    "complexity": "O(1)",
    "since": "2.6.0",
    "group": "hash",
    "return_summary": "@bulk-string-reply: the value of `field` after the increment.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "field",
        "type": "string"
      },
      {
        "name": "increment",
        "type": "double"
      }
    ],
    "arity": 4,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "hash",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "HKEYS": {
    "summary": "Get all the fields in a hash",
    "complexity": "O(N) where N is the size of the hash.",
    "since": "2.0.0",
    "group": "hash",
    "return_summary": "@array-reply: list of fields in the hash, or an empty list when `key` does\nnot exist.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "to-sort"
    ],
    "acl_categories": [
      "hash",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "HLEN": {
    "summary": "Get the number of fields in a hash",
    "complexity": "O(1)",
    "since": "2.0.0",
    "group": "hash",
    "return_summary": "@integer-reply: number of fields in the hash, or `0` when `key` does not exist.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "hash",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "HMGET": {
    "summary": "Get the values of all the given hash fields",
    "complexity": "O(N) where N is the number of fields being requested.",
    "since": "2.0.0",
    "group": "hash",
    "return_summary": "@array-reply: list of values associated with the given fields, in the same\norder as they are requested.\n\n```cli\nHSET myhash field1 \"Hello\"\nHSET myhash field2 \"World\"\nHMGET myhash field1 field2 nofield\n```",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "field",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "hash",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "HMSET": {
    "summary": "Set multiple hash fields to multiple values",
    "complexity": "O(N) where N is the number of fields being set.",
    "since": "2.0.0",
    "group": "hash",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "deprecated": true,
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": [
          "field",
          "value"
        ],
        "type": [
          "string",
          "string"
        ],
        "multiple": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "hash",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "HSET": {
    "summary": "Set the string value of a hash field",
    "complexity": "O(1) for each field/value pair added, so O(N) to add N field/value pairs when the command is called with multiple field/value pairs.",
    "since": "2.0.0",
    "group": "hash",
    "return_summary": "@integer-reply: The number of fields that were added.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": [
          "field",
          "value"
        ],
        "type": [
          "string",
          "string"
        ],
        "multiple": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "hash",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "HSETNX": {
    "summary": "Set the value of a hash field, only if the field does not exist",
    "complexity": "O(1)",
    "since": "2.0.0",
    "group": "hash",
    "return_summary": "@integer-reply, specifically:\n\n* `1` if `field` is a new field in the hash and `value` was set.\n* `0` if `field` already exists in the hash and no operation was performed.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "field",
        "type": "string"
      },
      {
        "name": "value",
        "type": "string"
      }
    ],
    "arity": 4,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "hash",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "HRANDFIELD": {
    "summary": "Get one or multiple random fields from a hash",
    "complexity": "O(N) where N is the number of fields returned",
    "since": "6.2.0",
    "group": "hash",
    "return_summary": "@bulk-string-reply: without the additional `count` argument, the command returns a Bulk Reply with the randomly selected field, or `nil` when `key` does not exist.\n\n@array-reply: when the additional `count` argument is passed, the command returns an array of fields, or an empty array when `key` does not exist.\nIf the `WITHVALUES` modifier is used, the reply is a list fields and their values from the hash.",
    "return_types": {
      "2": [
        "bulk-string-reply",
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "options",
        "type": "block",
        "block": [
          {
            "name": "count",
            "type": "integer"
          },
          {
            "name": "withvalues",
            "type": "enum",
            "enum": [
              "WITHVALUES"
            ],
            "optional": true
          }
        ],
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only",
      "random"
    ],
    "acl_categories": [
      "hash",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "HSTRLEN": {
    "summary": "Get the length of the value of a hash field",
    "complexity": "O(1)",
    "since": "3.2.0",
    "group": "hash",
    "return_summary": "@integer-reply: the string length of the value associated with `field`, or zero when `field` is not present in the hash or `key` does not exist at all.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "field",
        "type": "string"
      }
    ],
    "arity": 3,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "hash",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "HVALS": {
    "summary": "Get all the values in a hash",
    "complexity": "O(N) where N is the size of the hash.",
    "since": "2.0.0",
    "group": "hash",
    "return_summary": "@array-reply: list of values in the hash, or an empty list when `key` does\nnot exist.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "to-sort"
    ],
    "acl_categories": [
      "hash",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "INCR": {
    "summary": "Increment the integer value of a key by one",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "string",
    "return_summary": "@integer-reply: the value of `key` after the increment",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "string",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "INCRBY": {
    "summary": "Increment the integer value of a key by the given amount",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "string",
    "return_summary": "@integer-reply: the value of `key` after the increment",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "increment",
        "type": "integer"
      }
    ],
    "arity": 3,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "string",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "INCRBYFLOAT": {
    "summary": "Increment the float value of a key by the given amount",
    "complexity": "O(1)",
    "since": "2.6.0",
    "group": "string",
    "return_summary": "@bulk-string-reply: the value of `key` after the increment.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "increment",
        "type": "double"
      }
    ],
    "arity": 3,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "string",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "INFO": {
    "summary": "Get information and statistics about the server",
    "complexity": "TBD",
    "since": "1.0.0",
    "group": "server",
    "return_summary": "@bulk-string-reply: as a collection of text lines.\n\nLines can contain a section name (starting with a # character) or a property.\nAll the properties are in the form of `field:value` terminated by `\\r\\n`.\n\n```cli\nINFO\n```",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "deprecated": true,
    "arguments": [
      {
        "name": "section",
        "type": "string",
        "optional": true
      }
    ],
    "arity": -1,
    "command_flags": [
      "ok-loading",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "LOLWUT": {
    "summary": "Display some computer art and the Redis version",
    "complexity": "TBD",
    "since": "5.0.0",
    "group": "server",
    "return_summary": "@bulk-string-reply (or verbatim reply when using the RESP3 protocol): the string containing the generative computer art, and a text with the Redis version.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "command": "VERSION",
        "name": "version",
        "type": "integer",
        "optional": true
      }
    ],
    "arity": -1,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "KEYS": {
    "summary": "Find all keys matching the given pattern",
    "complexity": "O(N) with N being the number of keys in the database, under the assumption that the key names in the database and the given pattern have limited length.",
    "since": "1.0.0",
    "group": "generic",
    "return_summary": "@array-reply: list of keys matching `pattern`.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "pattern",
        "type": "pattern"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "to-sort"
    ],
    "acl_categories": [
      "keyspace",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "LASTSAVE": {
    "summary": "Get the UNIX time stamp of the last successful save to disk",
    "complexity": "TBD",
    "since": "1.0.0",
    "group": "server",
    "return_summary": "@integer-reply: an UNIX time stamp.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": 1,
    "command_flags": [
      "random",
      "fast",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "LINDEX": {
    "summary": "Get an element from a list by its index",
    "complexity": "O(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1).",
    "since": "1.0.0",
    "group": "list",
    "return_summary": "@bulk-string-reply: the requested element, or `nil` when `index` is out of range.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "index",
        "type": "integer"
      }
    ],
    "arity": 3,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "list",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "LINSERT": {
    "summary": "Insert an element before or after another element in a list",
    "complexity": "O(N) where N is the number of elements to traverse before seeing the value pivot. This means that inserting somewhere on the left end on the list (head) can be considered O(1) and inserting somewhere on the right end (tail) is O(N).",
    "since": "2.2.0",
    "group": "list",
    "return_summary": "@integer-reply: the length of the list after the insert operation, or `-1` when\nthe value `pivot` was not found.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "where",
        "type": "enum",
        "enum": [
          "BEFORE",
          "AFTER"
        ]
      },
      {
        "name": "pivot",
        "type": "string"
      },
      {
        "name": "element",
        "type": "string"
      }
    ],
    "arity": 5,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "list",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "LLEN": {
    "summary": "Get the length of a list",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "list",
    "return_summary": "@integer-reply: the length of the list at `key`.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "list",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "LPOP": {
    "summary": "Remove and get the first elements in a list",
    "complexity": "O(N) where N is the number of elements returned",
    "since": "1.0.0",
    "group": "list",
    "return_summary": "When called without the `count` argument:\n\n@bulk-string-reply: the value of the first element, or `nil` when `key` does not exist.\n\nWhen called with the `count` argument:\n\n@array-reply: list of popped elements, or `nil` when `key` does not exist.",
    "return_types": {
      "2": [
        "bulk-string-reply",
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.2",
        "Added the `count` argument."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "list",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "LPOS": {
    "summary": "Return the index of matching elements on a list",
    "complexity": "O(N) where N is the number of elements in the list, for the average case. When searching for elements near the head or the tail of the list, or when the MAXLEN option is provided, the command may run in constant time.",
    "since": "6.0.6",
    "group": "list",
    "return_summary": "The command returns the integer representing the matching element, or `nil` if there is no match. However, if the `COUNT` option is given the command returns an array (empty if there are no matches).",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "element",
        "type": "string"
      },
      {
        "command": "RANK",
        "name": "rank",
        "type": "integer",
        "optional": true
      },
      {
        "command": "COUNT",
        "name": "num-matches",
        "type": "integer",
        "optional": true
      },
      {
        "command": "MAXLEN",
        "name": "len",
        "type": "integer",
        "optional": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "list",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "LPUSH": {
    "summary": "Prepend one or multiple elements to a list",
    "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
    "since": "1.0.0",
    "group": "list",
    "return_summary": "@integer-reply: the length of the list after the push operations.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "2.4",
        "Accepts multiple `element` arguments."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "element",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "list",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "LPUSHX": {
    "summary": "Prepend an element to a list, only if the list exists",
    "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
    "since": "2.2.0",
    "group": "list",
    "return_summary": "@integer-reply: the length of the list after the push operation.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "4.0",
        "Accepts multiple `element` arguments."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "element",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "list",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "LRANGE": {
    "summary": "Get a range of elements from a list",
    "complexity": "O(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range.",
    "since": "1.0.0",
    "group": "list",
    "return_summary": "@array-reply: list of elements in the specified range.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "start",
        "type": "integer"
      },
      {
        "name": "stop",
        "type": "integer"
      }
    ],
    "arity": 4,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "list",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "LREM": {
    "summary": "Remove elements from a list",
    "complexity": "O(N+M) where N is the length of the list and M is the number of elements removed.",
    "since": "1.0.0",
    "group": "list",
    "return_summary": "@integer-reply: the number of removed elements.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "count",
        "type": "integer"
      },
      {
        "name": "element",
        "type": "string"
      }
    ],
    "arity": 4,
    "command_flags": [
      "write"
    ],
    "acl_categories": [
      "list",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "LSET": {
    "summary": "Set the value of an element in a list by its index",
    "complexity": "O(N) where N is the length of the list. Setting either the first or the last element of the list is O(1).",
    "since": "1.0.0",
    "group": "list",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "index",
        "type": "integer"
      },
      {
        "name": "element",
        "type": "string"
      }
    ],
    "arity": 4,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "list",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "LTRIM": {
    "summary": "Trim a list to the specified range",
    "complexity": "O(N) where N is the number of elements to be removed by the operation.",
    "since": "1.0.0",
    "group": "list",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "start",
        "type": "integer"
      },
      {
        "name": "stop",
        "type": "integer"
      }
    ],
    "arity": 4,
    "command_flags": [
      "write"
    ],
    "acl_categories": [
      "list",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "MEMORY DOCTOR": {
    "summary": "Outputs memory problems report",
    "complexity": "TBD",
    "since": "4.0.0",
    "group": "server",
    "return_summary": "@bulk-string-reply",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "random",
      "read-only"
    ],
    "acl_categories": [
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "MEMORY HELP": {
    "summary": "Show helpful text about the different subcommands",
    "complexity": "TBD",
    "since": "4.0.0",
    "group": "server",
    "return_summary": "@array-reply: a list of subcommands and their descriptions",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "random",
      "read-only"
    ],
    "acl_categories": [
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "MEMORY MALLOC-STATS": {
    "summary": "Show allocator internal stats",
    "complexity": "TBD",
    "since": "4.0.0",
    "group": "server",
    "return_summary": "@bulk-string-reply: the memory allocator's internal statistics report",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "random",
      "read-only"
    ],
    "acl_categories": [
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "MEMORY PURGE": {
    "summary": "Ask the allocator to release memory",
    "complexity": "TBD",
    "since": "4.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "random",
      "read-only"
    ],
    "acl_categories": [
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "MEMORY STATS": {
    "summary": "Show memory usage details",
    "complexity": "TBD",
    "since": "4.0.0",
    "group": "server",
    "return_summary": "@array-reply: nested list of memory usage metrics and their values\n\n**A note about the word slave used in this man page**: Starting with Redis 5, if not for backward compatibility, the Redis project no longer uses the word slave. Unfortunately in this command the word slave is part of the protocol, so we'll be able to remove such occurrences only when this API will be naturally deprecated.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "random",
      "read-only"
    ],
    "acl_categories": [
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "MEMORY USAGE": {
    "summary": "Estimate the memory usage of a key",
    "complexity": "O(N) where N is the number of samples.",
    "since": "4.0.0",
    "group": "server",
    "return_summary": "@integer-reply: the memory usage in bytes, or `nil` when the key does not exist.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "command": "SAMPLES",
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "random",
      "read-only"
    ],
    "acl_categories": [
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "MGET": {
    "summary": "Get the values of all the given keys",
    "complexity": "O(N) where N is the number of keys to retrieve.",
    "since": "1.0.0",
    "group": "string",
    "return_summary": "@array-reply: list of values at the specified keys.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "string",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "MIGRATE": {
    "summary": "Atomically transfer a key from a Redis instance to another one.",
    "complexity": "This command actually executes a DUMP+DEL in the source instance, and a RESTORE in the target instance. See the pages of these commands for time complexity. Also an O(N) data transfer between the two instances is performed.",
    "since": "2.6.0",
    "group": "generic",
    "return_summary": "@simple-string-reply: The command returns OK on success, or `NOKEY` if no keys were\nfound in the source instance.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "3.0.0",
        "Added the `!COPY` and `REPLACE` options."
      ],
      [
        "3.0.6",
        "Added the `!KEYS` option."
      ],
      [
        "4.0.7",
        "Added the `!AUTH` option."
      ],
      [
        "6.0.0",
        "Added the `AUTH2` option."
      ]
    ],
    "arguments": [
      {
        "name": "host",
        "type": "string"
      },
      {
        "name": "port",
        "type": "string"
      },
      {
        "name": "key",
        "type": "enum",
        "enum": [
          "key",
          "\"\""
        ]
      },
      {
        "name": "destination-db",
        "type": "integer"
      },
      {
        "name": "timeout",
        "type": "integer"
      },
      {
        "name": "copy",
        "type": "enum",
        "enum": [
          "COPY"
        ],
        "optional": true
      },
      {
        "name": "replace",
        "type": "enum",
        "enum": [
          "REPLACE"
        ],
        "optional": true
      },
      {
        "command": "AUTH",
        "name": "password",
        "type": "string",
        "optional": true
      },
      {
        "command": "AUTH2",
        "name": "username password",
        "type": "string",
        "optional": true
      },
      {
        "name": "key",
        "command": "KEYS",
        "type": "key",
        "variadic": true,
        "optional": true
      }
    ],
    "arity": -6,
    "command_flags": [
      "write",
      "random"
    ],
    "acl_categories": [
      "keyspace",
      "dangerous",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 3
          }
        },
        "find_keys": {
          "range": {
            "count": -2,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "MODULE LIST": {
    "summary": "List all modules loaded by the server",
    "complexity": "O(N) where N is the number of loaded modules.",
    "since": "4.0.0",
    "group": "server",
    "return_summary": "@array-reply: list of loaded modules. Each element in the list represents a\nmodule, and is in itself a list of property names and their values. The\nfollowing properties is reported for each loaded module:\n\n*   `name`: Name of the module\n*   `ver`: Version of the module",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "MODULE LOAD": {
    "summary": "Load a module",
    "complexity": "O(1)",
    "since": "4.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply: `OK` if module was loaded.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "path",
        "type": "string"
      },
      {
        "name": "arg",
        "type": "string",
        "variadic": true,
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "MODULE UNLOAD": {
    "summary": "Unload a module",
    "complexity": "O(1)",
    "since": "4.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply: `OK` if module was unloaded.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "name",
        "type": "string"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "MONITOR": {
    "summary": "Listen for all requests received by the server in real time",
    "complexity": "TBD",
    "since": "1.0.0",
    "group": "server",
    "return_summary": "**Non standard return value**, just dumps the received commands in an infinite\nflow.",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.0",
        "`AUTH` excluded from the command's output."
      ],
      [
        "6.2",
        "`RESET` can be called to exit monitor mode."
      ],
      [
        "6.2.4",
        "`AUTH`, `HELLO`, `EVAL`, `EVAL_RO`, `EVALSHA` and `EVALSHA_RO` included in the command's output."
      ]
    ],
    "arity": 1,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "MOVE": {
    "summary": "Move a key to another database",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "generic",
    "return_summary": "@integer-reply, specifically:\n\n* `1` if `key` was moved.\n* `0` if `key` was not moved.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "db",
        "type": "integer"
      }
    ],
    "arity": 3,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "keyspace",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "MSET": {
    "summary": "Set multiple keys to multiple values",
    "complexity": "O(N) where N is the number of keys to set.",
    "since": "1.0.1",
    "group": "string",
    "return_summary": "@simple-string-reply: always `OK` since `MSET` can't fail.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": [
          "key",
          "value"
        ],
        "type": [
          "key",
          "string"
        ],
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "string",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 1,
            "step": 2,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "MSETNX": {
    "summary": "Set multiple keys to multiple values, only if none of the keys exist",
    "complexity": "O(N) where N is the number of keys to set.",
    "since": "1.0.1",
    "group": "string",
    "return_summary": "@integer-reply, specifically:\n\n* `1` if the all the keys were set.\n* `0` if no key was set (at least one key already existed).",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": [
          "key",
          "value"
        ],
        "type": [
          "key",
          "string"
        ],
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "string",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 1,
            "step": 2,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "MULTI": {
    "summary": "Mark the start of a transaction block",
    "complexity": "TBD",
    "since": "1.2.0",
    "group": "transactions",
    "return_summary": "@simple-string-reply: always `OK`.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": 1,
    "command_flags": [
      "no-script",
      "fast",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "transaction",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "OBJECT": {
    "summary": "Inspect the internals of Redis objects",
    "complexity": "O(1) for all the currently implemented subcommands.",
    "since": "2.2.3",
    "group": "generic",
    "return_summary": "Different return values are used for different subcommands.\n\n* Subcommands `refcount` and `idletime` return integers.\n* Subcommand `encoding` returns a bulk reply.\n\nIf the object you try to inspect is missing, a null bulk reply is returned.",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "subcommand",
        "type": "string"
      },
      {
        "name": "arguments",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only",
      "random"
    ],
    "acl_categories": [
      "keyspace",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "count": -1,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "PERSIST": {
    "summary": "Remove the expiration from a key",
    "complexity": "O(1)",
    "since": "2.2.0",
    "group": "generic",
    "return_summary": "@integer-reply, specifically:\n\n* `1` if the timeout was removed.\n* `0` if `key` does not exist or does not have an associated timeout.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "keyspace",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "PEXPIRE": {
    "summary": "Set a key's time to live in milliseconds",
    "complexity": "O(1)",
    "since": "2.6.0",
    "group": "generic",
    "return_summary": "@integer-reply, specifically:\n\n* `1` if the timeout was set.\n* `0` if the timeout was not set. e.g. key doesn't exist, or operation skipped due to the provided arguments.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "7.0",
        "Added options: `NX`, `XX`, `GT` and `LT`."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "milliseconds",
        "type": "integer"
      },
      {
        "name": "condition",
        "type": "enum",
        "enum": [
          "NX",
          "XX",
          "GT",
          "LT"
        ],
        "optional": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "keyspace",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "PEXPIREAT": {
    "summary": "Set the expiration for a key as a UNIX timestamp specified in milliseconds",
    "complexity": "O(1)",
    "since": "2.6.0",
    "group": "generic",
    "return_summary": "@integer-reply, specifically:\n\n* `1` if the timeout was set.\n* `0` if the timeout was not set. e.g. key doesn't exist, or operation skipped due to the provided arguments.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "7.0",
        "Added options: `NX`, `XX`, `GT` and `LT`."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "milliseconds-timestamp",
        "type": "posix time"
      },
      {
        "name": "condition",
        "type": "enum",
        "enum": [
          "NX",
          "XX",
          "GT",
          "LT"
        ],
        "optional": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "keyspace",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "PEXPIRETIME": {
    "summary": "Get the expiration Unix timestamp for a key in milliseconds",
    "complexity": "O(1)",
    "since": "7.0.0",
    "group": "generic",
    "return_summary": "@integer-reply: Expiration Unix timestamp in milliseconds, or a negative value in order to signal an error (see the description below).\n* The command returns `-1` if the key exists but has no associated expiration time.\n* The command returns `-2` if the key does not exist.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "fast",
      "random"
    ],
    "acl_categories": [
      "keyspace",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "PFADD": {
    "summary": "Adds the specified elements to the specified HyperLogLog.",
    "complexity": "O(1) to add every element.",
    "since": "2.8.9",
    "group": "hyperloglog",
    "return_summary": "@integer-reply, specifically:\n\n* 1 if at least 1 HyperLogLog internal register was altered. 0 otherwise.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "element",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "hyperloglog",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "PFCOUNT": {
    "summary": "Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).",
    "complexity": "O(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.",
    "since": "2.8.9",
    "group": "hyperloglog",
    "return_summary": "@integer-reply, specifically:\n\n* The approximated number of unique elements observed via `PFADD`.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only",
      "may-replicate"
    ],
    "acl_categories": [
      "hyperloglog",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "PFMERGE": {
    "summary": "Merge N different HyperLogLogs into a single one.",
    "complexity": "O(N) to merge N HyperLogLogs, but with high constant times.",
    "since": "2.8.9",
    "group": "hyperloglog",
    "return_summary": "@simple-string-reply: The command just returns `OK`.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "destkey",
        "type": "key"
      },
      {
        "name": "sourcekey",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "hyperloglog",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "PING": {
    "summary": "Ping the server",
    "complexity": "TBD",
    "since": "1.0.0",
    "group": "connection",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "message",
        "type": "string",
        "optional": true
      }
    ],
    "arity": -1,
    "command_flags": [
      "ok-stale",
      "fast"
    ],
    "acl_categories": [
      "connection",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "PSETEX": {
    "summary": "Set the value and expiration in milliseconds of a key",
    "complexity": "O(1)",
    "since": "2.6.0",
    "group": "string",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "milliseconds",
        "type": "integer"
      },
      {
        "name": "value",
        "type": "string"
      }
    ],
    "arity": 4,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "string",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "PSUBSCRIBE": {
    "summary": "Listen for messages published to channels matching the given patterns",
    "complexity": "O(N) where N is the number of patterns the client is already subscribed to.",
    "since": "2.0.0",
    "group": "pubsub",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": [
          "pattern"
        ],
        "type": [
          "pattern"
        ],
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "pub-sub",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "pubsub",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "PUBSUB": {
    "summary": "Inspect the state of the Pub/Sub subsystem",
    "complexity": "O(N) for the CHANNELS subcommand, where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns). O(N) for the NUMSUB subcommand, where N is the number of requested channels. O(1) for the NUMPAT subcommand.",
    "since": "2.8.0",
    "group": "pubsub",
    "return_summary": "@integer-reply: the number of patterns all the clients are subscribed to.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "subcommand",
        "type": "string"
      },
      {
        "name": "argument",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "pub-sub",
      "ok-loading",
      "ok-stale",
      "random"
    ],
    "acl_categories": [
      "pubsub",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "PTTL": {
    "summary": "Get the time to live for a key in milliseconds",
    "complexity": "O(1)",
    "since": "2.6.0",
    "group": "generic",
    "return_summary": "@integer-reply: TTL in milliseconds, or a negative value in order to signal an error (see the description above).",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "fast",
      "random"
    ],
    "acl_categories": [
      "keyspace",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "PUBLISH": {
    "summary": "Post a message to a channel",
    "complexity": "O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client).",
    "since": "2.0.0",
    "group": "pubsub",
    "return_summary": "@integer-reply: the number of clients that received the message. Note that in a\nRedis Cluster, only clients that are connected to the same node as the\npublishing client are included in the count.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "channel",
        "type": "string"
      },
      {
        "name": "message",
        "type": "string"
      }
    ],
    "arity": 3,
    "command_flags": [
      "pub-sub",
      "ok-loading",
      "ok-stale",
      "fast",
      "may-replicate"
    ],
    "acl_categories": [
      "pubsub",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "PUNSUBSCRIBE": {
    "summary": "Stop listening for messages posted to channels matching the given patterns",
    "complexity": "O(N+M) where N is the number of patterns the client is already subscribed and M is the number of total patterns subscribed in the system (by any client).",
    "since": "2.0.0",
    "group": "pubsub",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "pattern",
        "type": "pattern",
        "optional": true,
        "multiple": true
      }
    ],
    "arity": -1,
    "command_flags": [
      "pub-sub",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "pubsub",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "QUIT": {
    "summary": "Close the connection",
    "complexity": "TBD",
    "since": "1.0.0",
    "group": "connection",
    "return_summary": "@simple-string-reply: always OK.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    }
  },
  "RANDOMKEY": {
    "summary": "Return a random key from the keyspace",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "generic",
    "return_summary": "@bulk-string-reply: the random key, or `nil` when the database is empty.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": 1,
    "command_flags": [
      "read-only",
      "random"
    ],
    "acl_categories": [
      "keyspace",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "READONLY": {
    "summary": "Enables read queries for a connection to a cluster replica node",
    "complexity": "O(1)",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": 1,
    "command_flags": [
      "fast"
    ],
    "acl_categories": [
      "connection",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "READWRITE": {
    "summary": "Disables read queries for a connection to a cluster replica node",
    "complexity": "O(1)",
    "since": "3.0.0",
    "group": "cluster",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": 1,
    "command_flags": [
      "fast"
    ],
    "acl_categories": [
      "connection",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "RENAME": {
    "summary": "Rename a key",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "generic",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "newkey",
        "type": "key"
      }
    ],
    "arity": 3,
    "command_flags": [
      "write"
    ],
    "acl_categories": [
      "keyspace",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "RENAMENX": {
    "summary": "Rename a key, only if the new key does not exist",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "generic",
    "return_summary": "@integer-reply, specifically:\n\n* `1` if `key` was renamed to `newkey`.\n* `0` if `newkey` already exists.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "newkey",
        "type": "key"
      }
    ],
    "arity": 3,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "keyspace",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "RESET": {
    "summary": "Reset the connection",
    "complexity": "TBD",
    "since": "6.2",
    "group": "connection",
    "return_summary": "@simple-string-reply: always 'RESET'.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": 1,
    "command_flags": [
      "no-script",
      "ok-stale",
      "ok-loading",
      "fast"
    ],
    "acl_categories": [
      "connection",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "RESTORE": {
    "summary": "Create a key using the provided serialized value, previously obtained using DUMP.",
    "complexity": "O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).",
    "since": "2.6.0",
    "group": "generic",
    "return_summary": "@simple-string-reply: The command returns OK on success.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "ttl",
        "type": "integer"
      },
      {
        "name": "serialized-value",
        "type": "string"
      },
      {
        "name": "replace",
        "type": "enum",
        "enum": [
          "REPLACE"
        ],
        "optional": true
      },
      {
        "name": "absttl",
        "type": "enum",
        "enum": [
          "ABSTTL"
        ],
        "optional": true
      },
      {
        "command": "IDLETIME",
        "name": "seconds",
        "type": "integer",
        "optional": true
      },
      {
        "command": "FREQ",
        "name": "frequency",
        "type": "integer",
        "optional": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "keyspace",
      "dangerous",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "ROLE": {
    "summary": "Return the role of the instance in the context of replication",
    "complexity": "TBD",
    "since": "2.8.12",
    "group": "server",
    "return_summary": "@array-reply: where the first element is one of `master`, `slave`, `sentinel` and the additional elements are role-specific as illustrated above.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "deprecated": true,
    "arity": 1,
    "command_flags": [
      "ok-loading",
      "ok-stale",
      "no-script",
      "fast"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "RPOP": {
    "summary": "Remove and get the last elements in a list",
    "complexity": "O(N) where N is the number of elements returned",
    "since": "1.0.0",
    "group": "list",
    "return_summary": "When called without the `count` argument:\n\n@bulk-string-reply: the value of the last element, or `nil` when `key` does not exist.\n\nWhen called with the `count` argument:\n\n@array-reply: list of popped elements, or `nil` when `key` does not exist.",
    "return_types": {
      "2": [
        "bulk-string-reply",
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.2",
        "Added the `count` argument."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "list",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "RPOPLPUSH": {
    "summary": "Remove the last element in a list, prepend it to another list and return it",
    "complexity": "O(1)",
    "since": "1.2.0",
    "group": "list",
    "return_summary": "@bulk-string-reply: the element being popped and pushed.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "deprecated": true,
    "arguments": [
      {
        "name": "source",
        "type": "key"
      },
      {
        "name": "destination",
        "type": "key"
      }
    ],
    "arity": 3,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "list",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "LMOVE": {
    "summary": "Pop an element from a list, push it to another list and return it",
    "complexity": "O(1)",
    "since": "6.2.0",
    "group": "list",
    "return_summary": "@bulk-string-reply: the element being popped and pushed.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "deprecated": true,
    "arguments": [
      {
        "name": "source",
        "type": "key"
      },
      {
        "name": "destination",
        "type": "key"
      },
      {
        "name": "wherefrom",
        "type": "enum",
        "enum": [
          "LEFT",
          "RIGHT"
        ]
      },
      {
        "name": "whereto",
        "type": "enum",
        "enum": [
          "LEFT",
          "RIGHT"
        ]
      }
    ],
    "arity": 5,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "list",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "RPUSH": {
    "summary": "Append one or multiple elements to a list",
    "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
    "since": "1.0.0",
    "group": "list",
    "return_summary": "@integer-reply: the length of the list after the push operation.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "2.4",
        "Accepts multiple `element` arguments."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "element",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "list",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "RPUSHX": {
    "summary": "Append an element to a list, only if the list exists",
    "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
    "since": "2.2.0",
    "group": "list",
    "return_summary": "@integer-reply: the length of the list after the push operation.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "4.0",
        "Accepts multiple `element` arguments."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "element",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "list",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "SADD": {
    "summary": "Add one or more members to a set",
    "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
    "since": "1.0.0",
    "group": "set",
    "return_summary": "@integer-reply: the number of elements that were added to the set, not including\nall the elements already present in the set.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "2.4",
        "Accepts multiple `member` arguments."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "member",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "set",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "SAVE": {
    "summary": "Synchronously save the dataset to disk",
    "complexity": "TBD",
    "since": "1.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply: The commands returns OK on success.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": 1,
    "command_flags": [
      "admin",
      "no-script"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SCARD": {
    "summary": "Get the number of members in a set",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "set",
    "return_summary": "@integer-reply: the cardinality (number of elements) of the set, or `0` if `key`\ndoes not exist.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "set",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SCRIPT DEBUG": {
    "summary": "Set the debug mode for executed scripts.",
    "complexity": "O(1)",
    "since": "3.2.0",
    "group": "scripting",
    "return_summary": "@simple-string-reply: `OK`.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "mode",
        "type": "enum",
        "enum": [
          "YES",
          "SYNC",
          "NO"
        ]
      }
    ],
    "arity": -2,
    "command_flags": [
      "no-script",
      "may-replicate"
    ],
    "acl_categories": [
      "scripting",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SCRIPT EXISTS": {
    "summary": "Check existence of scripts in the script cache.",
    "complexity": "O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).",
    "since": "2.6.0",
    "group": "scripting",
    "return_summary": "@array-reply The command returns an array of integers that correspond to\nthe specified SHA1 digest arguments.\nFor every corresponding SHA1 digest of a script that actually exists in the\nscript cache, an 1 is returned, otherwise 0 is returned.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "sha1",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "no-script",
      "may-replicate"
    ],
    "acl_categories": [
      "scripting",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SCRIPT FLUSH": {
    "summary": "Remove all the scripts from the script cache.",
    "complexity": "O(N) with N being the number of scripts in cache",
    "since": "2.6.0",
    "group": "scripting",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.2.0",
        "Added the `ASYNC` and `!SYNC` flushing mode modifiers, as well as the  **lazyfree-lazy-user-flush** configuration directive."
      ]
    ],
    "arguments": [
      {
        "name": "async",
        "type": "enum",
        "enum": [
          "ASYNC",
          "SYNC"
        ],
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "no-script",
      "may-replicate"
    ],
    "acl_categories": [
      "scripting",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SCRIPT KILL": {
    "summary": "Kill the script currently in execution.",
    "complexity": "O(1)",
    "since": "2.6.0",
    "group": "scripting",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "no-script",
      "may-replicate"
    ],
    "acl_categories": [
      "scripting",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SCRIPT LOAD": {
    "summary": "Load the specified Lua script into the script cache.",
    "complexity": "O(N) with N being the length in bytes of the script body.",
    "since": "2.6.0",
    "group": "scripting",
    "return_summary": "@bulk-string-reply This command returns the SHA1 digest of the script added into the\nscript cache.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "script",
        "type": "string"
      }
    ],
    "arity": -2,
    "command_flags": [
      "no-script",
      "may-replicate"
    ],
    "acl_categories": [
      "scripting",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SDIFF": {
    "summary": "Subtract multiple sets",
    "complexity": "O(N) where N is the total number of elements in all given sets.",
    "since": "1.0.0",
    "group": "set",
    "return_summary": "@array-reply: list with members of the resulting set.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only",
      "to-sort"
    ],
    "acl_categories": [
      "set",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SDIFFSTORE": {
    "summary": "Subtract multiple sets and store the resulting set in a key",
    "complexity": "O(N) where N is the total number of elements in all given sets.",
    "since": "1.0.0",
    "group": "set",
    "return_summary": "@integer-reply: the number of elements in the resulting set.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "destination",
        "type": "key"
      },
      {
        "name": "key",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "set",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "SELECT": {
    "summary": "Change the selected database for the current connection",
    "complexity": "TBD",
    "since": "1.0.0",
    "group": "connection",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "index",
        "type": "integer"
      }
    ],
    "arity": 2,
    "command_flags": [
      "ok-loading",
      "fast",
      "ok-stale"
    ],
    "acl_categories": [
      "connection",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SET": {
    "summary": "Set the string value of a key",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "string",
    "return_summary": "@simple-string-reply: `OK` if `SET` was executed correctly.\n\n@nil-reply: `(nil)` if the `SET` operation was not performed because the user specified the `NX` or `XX` option but the condition was not met.\n\nIf the command is issued with the `!GET` option, the above does not apply. It will instead reply as follows, regardless if the `SET` was actually performed:\n\n@bulk-string-reply: the old string value stored at key.\n\n@nil-reply: `(nil)` if the key did not exist.",
    "return_types": {
      "2": [
        "simple-string-reply",
        "nil-reply",
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "2.6.12",
        "Added the `EX`, `PX`, `NX` and `XX` options."
      ],
      [
        "6.0",
        "Added the `KEEPTTL` option."
      ],
      [
        "6.2",
        "Added the `!GET`, `EXAT` and `PXAT` option."
      ],
      [
        "7.0",
        "Allowed the `NX` and `!GET` options to be used together."
      ]
    ],
    "deprecated": true,
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "value",
        "type": "string"
      },
      {
        "name": "expiration",
        "type": "enum",
        "enum": [
          "EX seconds",
          "PX milliseconds",
          "EXAT timestamp",
          "PXAT milliseconds-timestamp",
          "KEEPTTL"
        ],
        "optional": true
      },
      {
        "name": "condition",
        "type": "enum",
        "enum": [
          "NX",
          "XX"
        ],
        "optional": true
      },
      {
        "name": "get",
        "type": "enum",
        "enum": [
          "GET"
        ],
        "optional": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "string",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "SETBIT": {
    "summary": "Sets or clears the bit at offset in the string value stored at key",
    "complexity": "O(1)",
    "since": "2.2.0",
    "group": "bitmap",
    "return_summary": "@integer-reply: the original bit value stored at _offset_.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "offset",
        "type": "integer"
      },
      {
        "name": "value",
        "type": "integer"
      }
    ],
    "arity": 4,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "bitmap",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "SETEX": {
    "summary": "Set the value and expiration of a key",
    "complexity": "O(1)",
    "since": "2.0.0",
    "group": "string",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "seconds",
        "type": "integer"
      },
      {
        "name": "value",
        "type": "string"
      }
    ],
    "arity": 4,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "string",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "SETNX": {
    "summary": "Set the value of a key, only if the key does not exist",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "string",
    "return_summary": "@integer-reply, specifically:\n\n* `1` if the key was set\n* `0` if the key was not set",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "value",
        "type": "string"
      }
    ],
    "arity": 3,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "string",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "SETRANGE": {
    "summary": "Overwrite part of a string at key starting at the specified offset",
    "complexity": "O(1), not counting the time taken to copy the new string in place. Usually, this string is very small so the amortized complexity is O(1). Otherwise, complexity is O(M) with M being the length of the value argument.",
    "since": "2.2.0",
    "group": "string",
    "return_summary": "@integer-reply: the length of the string after it was modified by the command.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "offset",
        "type": "integer"
      },
      {
        "name": "value",
        "type": "string"
      }
    ],
    "arity": 4,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "string",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "SHUTDOWN": {
    "summary": "Synchronously save the dataset to disk and then shut down the server",
    "complexity": "TBD",
    "since": "1.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply on error.\nOn success nothing is returned since the server quits and the connection is\nclosed.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "save-mode",
        "type": "enum",
        "enum": [
          "NOSAVE",
          "SAVE"
        ],
        "optional": true
      }
    ],
    "arity": -1,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SINTER": {
    "summary": "Intersect multiple sets",
    "complexity": "O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.",
    "since": "1.0.0",
    "group": "set",
    "return_summary": "@array-reply: list with members of the resulting set.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only",
      "to-sort"
    ],
    "acl_categories": [
      "set",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SINTERCARD": {
    "summary": "Intersect multiple sets and return the cardinality of the result",
    "complexity": "O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.",
    "since": "7.0.0",
    "group": "set",
    "return_summary": "@integer-reply: the number of elements in the resulting intersection.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "set",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SINTERSTORE": {
    "summary": "Intersect multiple sets and store the resulting set in a key",
    "complexity": "O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.",
    "since": "1.0.0",
    "group": "set",
    "return_summary": "@integer-reply: the number of elements in the resulting set.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "destination",
        "type": "key"
      },
      {
        "name": "key",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "set",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "SISMEMBER": {
    "summary": "Determine if a given value is a member of a set",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "set",
    "return_summary": "@integer-reply, specifically:\n\n* `1` if the element is a member of the set.\n* `0` if the element is not a member of the set, or if `key` does not exist.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "member",
        "type": "string"
      }
    ],
    "arity": 3,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "set",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SMISMEMBER": {
    "summary": "Returns the membership associated with the given elements for a set",
    "complexity": "O(N) where N is the number of elements being checked for membership",
    "since": "6.2.0",
    "group": "set",
    "return_summary": "@array-reply: list representing the membership of the given elements, in the same\norder as they are requested.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "member",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "set",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SLAVEOF": {
    "summary": "Make the server a replica of another instance, or promote it as master. Deprecated starting with Redis 5. Use REPLICAOF instead.",
    "complexity": "TBD",
    "since": "1.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "host",
        "type": "string"
      },
      {
        "name": "port",
        "type": "string"
      }
    ],
    "arity": 3,
    "command_flags": [
      "admin",
      "no-script",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "REPLICAOF": {
    "summary": "Make the server a replica of another instance, or promote it as master.",
    "complexity": "TBD",
    "since": "5.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "host",
        "type": "string"
      },
      {
        "name": "port",
        "type": "string"
      }
    ],
    "arity": 3,
    "command_flags": [
      "admin",
      "no-script",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SLOWLOG": {
    "summary": "Manages the Redis slow queries log",
    "complexity": "TBD",
    "since": "2.2.12",
    "group": "server",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "subcommand",
        "type": "string"
      },
      {
        "name": "argument",
        "type": "string",
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "random",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SMEMBERS": {
    "summary": "Get all the members in a set",
    "complexity": "O(N) where N is the set cardinality.",
    "since": "1.0.0",
    "group": "set",
    "return_summary": "@array-reply: all elements of the set.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "to-sort"
    ],
    "acl_categories": [
      "set",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SMOVE": {
    "summary": "Move a member from one set to another",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "set",
    "return_summary": "@integer-reply, specifically:\n\n* `1` if the element is moved.\n* `0` if the element is not a member of `source` and no operation was performed.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "source",
        "type": "key"
      },
      {
        "name": "destination",
        "type": "key"
      },
      {
        "name": "member",
        "type": "string"
      }
    ],
    "arity": 4,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "set",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "SORT": {
    "summary": "Sort the elements in a list, set or sorted set",
    "complexity": "O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).",
    "since": "1.0.0",
    "group": "generic",
    "return_summary": "@array-reply: without passing the `store` option the command returns a list of sorted elements.\n@integer-reply: when the `store` option is specified the command returns the number of sorted elements in the destination list.",
    "return_types": {
      "2": [
        "array-reply",
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "command": "BY",
        "name": "pattern",
        "type": "pattern",
        "optional": true
      },
      {
        "command": "LIMIT",
        "name": [
          "offset",
          "count"
        ],
        "type": [
          "integer",
          "integer"
        ],
        "optional": true
      },
      {
        "command": "GET",
        "name": "pattern",
        "type": "string",
        "optional": true,
        "multiple": true
      },
      {
        "name": "order",
        "type": "enum",
        "enum": [
          "ASC",
          "DESC"
        ],
        "optional": true
      },
      {
        "name": "sorting",
        "type": "enum",
        "enum": [
          "ALPHA"
        ],
        "optional": true
      },
      {
        "command": "STORE",
        "name": "destination",
        "type": "key",
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "list",
      "set",
      "sortedset",
      "dangerous",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "SORT_RO": {
    "summary": "Sort the elements in a list, set or sorted set. Read-only variant of SORT.",
    "complexity": "O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).",
    "since": "7.0.0",
    "group": "generic",
    "return_summary": "@array-reply: a list of sorted elements.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "command": "BY",
        "name": "pattern",
        "type": "pattern",
        "optional": true
      },
      {
        "command": "LIMIT",
        "name": [
          "offset",
          "count"
        ],
        "type": [
          "integer",
          "integer"
        ],
        "optional": true
      },
      {
        "command": "GET",
        "name": "pattern",
        "type": "string",
        "optional": true,
        "multiple": true
      },
      {
        "name": "order",
        "type": "enum",
        "enum": [
          "ASC",
          "DESC"
        ],
        "optional": true
      },
      {
        "name": "sorting",
        "type": "enum",
        "enum": [
          "ALPHA"
        ],
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "list",
      "set",
      "sortedset",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SPOP": {
    "summary": "Remove and return one or multiple random members from a set",
    "complexity": "Without the count argument O(1), otherwise O(N) where N is the value of the passed count.",
    "since": "1.0.0",
    "group": "set",
    "return_summary": "When called without the `count` argument:\n\n@bulk-string-reply: the removed member, or `nil` when `key` does not exist.\n\nWhen called with the `count` argument:\n\n@array-reply: the removed members, or an empty array when `key` does not exist.",
    "return_types": {
      "2": [
        "bulk-string-reply",
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "3.2",
        "Added the `count` argument."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "write",
      "random",
      "fast"
    ],
    "acl_categories": [
      "set",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "SRANDMEMBER": {
    "summary": "Get one or multiple random members from a set",
    "complexity": "Without the count argument O(1), otherwise O(N) where N is the absolute value of the passed count.",
    "since": "1.0.0",
    "group": "set",
    "return_summary": "@bulk-string-reply: without the additional `count` argument, the command returns a Bulk Reply with the randomly selected element, or `nil` when `key` does not exist.\n\n@array-reply: when the additional `count` argument is passed, the command returns an array of elements, or an empty array when `key` does not exist.",
    "return_types": {
      "2": [
        "bulk-string-reply",
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "2.6.0",
        "Added the optional `count` argument."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only",
      "random"
    ],
    "acl_categories": [
      "set",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SREM": {
    "summary": "Remove one or more members from a set",
    "complexity": "O(N) where N is the number of members to be removed.",
    "since": "1.0.0",
    "group": "set",
    "return_summary": "@integer-reply: the number of members that were removed from the set, not\nincluding non existing members.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "2.4",
        "Accepts multiple `member` arguments."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "member",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "set",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "STRALGO": {
    "summary": "Run algorithms (currently LCS) against strings",
    "complexity": "For LCS O(strlen(s1)*strlen(s2))",
    "since": "6.0.0",
    "group": "string",
    "return_summary": "For the LCS algorithm:\n\n* Without modifiers the string representing the longest common substring is returned.\n* When `LEN` is given the command returns the length of the longest common substring.\n* When `IDX` is given the command returns an array with the LCS length and all the ranges in both the strings, start and end offset for each string, where there are matches. When `WITHMATCHLEN` is given each array representing a match will also have the length of the match (see examples).",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "algorithm",
        "type": "enum",
        "enum": [
          "LCS"
        ]
      },
      {
        "name": "algo-specific-argument",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "string",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "STRLEN": {
    "summary": "Get the length of the value stored in a key",
    "complexity": "O(1)",
    "since": "2.2.0",
    "group": "string",
    "return_summary": "@integer-reply: the length of the string at `key`, or `0` when `key` does not\nexist.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "string",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SUBSCRIBE": {
    "summary": "Listen for messages published to the given channels",
    "complexity": "O(N) where N is the number of channels to subscribe to.",
    "since": "2.0.0",
    "group": "pubsub",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.2",
        "`RESET` can be called to exit subscribed state."
      ]
    ],
    "arguments": [
      {
        "name": "channel",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "pub-sub",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "pubsub",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SUNION": {
    "summary": "Add multiple sets",
    "complexity": "O(N) where N is the total number of elements in all given sets.",
    "since": "1.0.0",
    "group": "set",
    "return_summary": "@array-reply: list with members of the resulting set.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only",
      "to-sort"
    ],
    "acl_categories": [
      "set",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SUNIONSTORE": {
    "summary": "Add multiple sets and store the resulting set in a key",
    "complexity": "O(N) where N is the total number of elements in all given sets.",
    "since": "1.0.0",
    "group": "set",
    "return_summary": "@integer-reply: the number of elements in the resulting set.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "destination",
        "type": "key"
      },
      {
        "name": "key",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "set",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "SWAPDB": {
    "summary": "Swaps two Redis databases",
    "complexity": "O(N) where N is the count of clients watching or blocking on keys from both databases.",
    "since": "4.0.0",
    "group": "server",
    "return_summary": "@simple-string-reply: `OK` if `SWAPDB` was executed correctly.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "index1",
        "type": "integer"
      },
      {
        "name": "index2",
        "type": "integer"
      }
    ],
    "arity": 3,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "keyspace",
      "dangerous",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "SYNC": {
    "summary": "Internal command used for replication",
    "complexity": "TBD",
    "since": "1.0.0",
    "group": "server",
    "return_summary": "**Non standard return value**, a bulk transfer of the data followed by `PING` and write requests from the master.",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": 1,
    "command_flags": [
      "admin",
      "no-script"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "PSYNC": {
    "summary": "Internal command used for replication",
    "complexity": "TBD",
    "since": "2.8.0",
    "group": "server",
    "return_summary": "**Non standard return value**, a bulk transfer of the data followed by `PING` and write requests from the master.",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "replicationid",
        "type": "integer"
      },
      {
        "name": "offset",
        "type": "integer"
      }
    ],
    "arity": -3,
    "command_flags": [
      "admin",
      "no-script"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "TIME": {
    "summary": "Return the current server time",
    "complexity": "O(1)",
    "since": "2.6.0",
    "group": "server",
    "return_summary": "@array-reply, specifically:\n\nA multi bulk reply containing two elements:\n\n* unix time in seconds.\n* microseconds.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": 1,
    "command_flags": [
      "random",
      "fast",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "TOUCH": {
    "summary": "Alters the last access time of a key(s). Returns the number of existing keys specified.",
    "complexity": "O(N) where N is the number of keys that will be touched.",
    "since": "3.2.1",
    "group": "generic",
    "return_summary": "@integer-reply: The number of keys that were touched.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "keyspace",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "TTL": {
    "summary": "Get the time to live for a key in seconds",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "generic",
    "return_summary": "@integer-reply: TTL in seconds, or a negative value in order to signal an error (see the description above).",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "fast",
      "random"
    ],
    "acl_categories": [
      "keyspace",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "TYPE": {
    "summary": "Determine the type stored at key",
    "complexity": "O(1)",
    "since": "1.0.0",
    "group": "generic",
    "return_summary": "@simple-string-reply: type of `key`, or `none` when `key` does not exist.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "keyspace",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "UNSUBSCRIBE": {
    "summary": "Stop listening for messages posted to the given channels",
    "complexity": "O(N) where N is the number of clients already subscribed to a channel.",
    "since": "2.0.0",
    "group": "pubsub",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "channel",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "arity": -1,
    "command_flags": [
      "pub-sub",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "pubsub",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "UNLINK": {
    "summary": "Delete a key asynchronously in another thread. Otherwise it is just as DEL, but non blocking.",
    "complexity": "O(1) for each key removed regardless of its size. Then the command does O(N) work in a different thread in order to reclaim memory, where N is the number of allocations the deleted objects where composed of.",
    "since": "4.0.0",
    "group": "generic",
    "return_summary": "@integer-reply: The number of keys that were unlinked.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "keyspace",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "UNWATCH": {
    "summary": "Forget about all watched keys",
    "complexity": "O(1)",
    "since": "2.2.0",
    "group": "transactions",
    "return_summary": "@simple-string-reply: always `OK`.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": 1,
    "command_flags": [
      "no-script",
      "fast",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "transaction",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "WAIT": {
    "summary": "Wait for the synchronous replication of all the write commands sent in the context of the current connection",
    "complexity": "O(1)",
    "since": "3.0.0",
    "group": "generic",
    "return_summary": "@integer-reply: The command returns the number of replicas reached by all the writes performed in the context of the current connection.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "numreplicas",
        "type": "integer"
      },
      {
        "name": "timeout",
        "type": "integer"
      }
    ],
    "arity": 3,
    "command_flags": [
      "no-script"
    ],
    "acl_categories": [
      "connection",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "WATCH": {
    "summary": "Watch the given keys to determine execution of the MULTI/EXEC block",
    "complexity": "O(1) for every key.",
    "since": "2.2.0",
    "group": "transactions",
    "return_summary": "@simple-string-reply: always `OK`.",
    "return_types": {
      "2": [
        "simple-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "no-script",
      "fast",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "transaction",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZADD": {
    "summary": "Add one or more members to a sorted set, or update its score if it already exists",
    "complexity": "O(log(N)) for each item added, where N is the number of elements in the sorted set.",
    "since": "1.2.0",
    "group": "sorted_set",
    "return_summary": "@integer-reply, specifically:\n\n* When used without optional arguments, the number of elements added to the sorted set (excluding score updates).\n* If the `CH` option is specified, the number of elements that were changed (added or updated).\n\nIf the `INCR` option is specified, the return value will be @bulk-string-reply:\n\n* The new score of `member` (a double precision floating point number) represented as string, or `nil` if the operation was aborted (when called with either the `XX` or the `NX` option).",
    "return_types": {
      "2": [
        "integer-reply",
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "2.4",
        "Accepts multiple elements."
      ],
      [
        "3.0.2",
        "Added the `XX`, `NX`, `CH` and `INCR` options."
      ],
      [
        "6.2",
        "Added the `GT` and `LT` options."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "condition",
        "type": "enum",
        "enum": [
          "NX",
          "XX"
        ],
        "optional": true
      },
      {
        "name": "comparison",
        "type": "enum",
        "enum": [
          "GT",
          "LT"
        ],
        "optional": true
      },
      {
        "name": "change",
        "type": "enum",
        "enum": [
          "CH"
        ],
        "optional": true
      },
      {
        "name": "increment",
        "type": "enum",
        "enum": [
          "INCR"
        ],
        "optional": true
      },
      {
        "name": [
          "score",
          "member"
        ],
        "type": [
          "double",
          "string"
        ],
        "multiple": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "sortedset",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "ZCARD": {
    "summary": "Get the number of members in a sorted set",
    "complexity": "O(1)",
    "since": "1.2.0",
    "group": "sorted_set",
    "return_summary": "@integer-reply: the cardinality (number of elements) of the sorted set, or `0`\nif `key` does not exist.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZCOUNT": {
    "summary": "Count the members in a sorted set with scores within the given values",
    "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
    "since": "2.0.0",
    "group": "sorted_set",
    "return_summary": "@integer-reply: the number of elements in the specified score range.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "min",
        "type": "double"
      },
      {
        "name": "max",
        "type": "double"
      }
    ],
    "arity": 4,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZDIFF": {
    "summary": "Subtract multiple sorted sets",
    "complexity": "O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.",
    "since": "6.2.0",
    "group": "sorted_set",
    "return_summary": "@array-reply: the result of the difference (optionally with their scores, in case\nthe `WITHSCORES` option is given).",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "multiple": true
      },
      {
        "name": "withscores",
        "type": "enum",
        "enum": [
          "WITHSCORES"
        ],
        "optional": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZDIFFSTORE": {
    "summary": "Subtract multiple sorted sets and store the resulting sorted set in a new key",
    "complexity": "O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.",
    "since": "6.2.0",
    "group": "sorted_set",
    "return_summary": "@integer-reply: the number of elements in the resulting sorted set at\n`destination`.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "destination",
        "type": "key"
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "sortedset",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "ZINCRBY": {
    "summary": "Increment the score of a member in a sorted set",
    "complexity": "O(log(N)) where N is the number of elements in the sorted set.",
    "since": "1.2.0",
    "group": "sorted_set",
    "return_summary": "@bulk-string-reply: the new score of `member` (a double precision floating point\nnumber), represented as string.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "increment",
        "type": "integer"
      },
      {
        "name": "member",
        "type": "string"
      }
    ],
    "arity": 4,
    "command_flags": [
      "write",
      "use-memory",
      "fast"
    ],
    "acl_categories": [
      "sortedset",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "ZINTER": {
    "summary": "Intersect multiple sorted sets",
    "complexity": "O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.",
    "since": "6.2.0",
    "group": "sorted_set",
    "return_summary": "@array-reply: the result of intersection (optionally with their scores, in case \nthe `WITHSCORES` option is given).",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "multiple": true
      },
      {
        "command": "WEIGHTS",
        "name": "weight",
        "type": "integer",
        "variadic": true,
        "optional": true
      },
      {
        "command": "AGGREGATE",
        "name": "aggregate",
        "type": "enum",
        "enum": [
          "SUM",
          "MIN",
          "MAX"
        ],
        "optional": true
      },
      {
        "name": "withscores",
        "type": "enum",
        "enum": [
          "WITHSCORES"
        ],
        "optional": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZINTERCARD": {
    "summary": "Intersect multiple sorted sets and return the cardinality of the result",
    "complexity": "O(N*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets.",
    "since": "7.0.0",
    "group": "sorted_set",
    "return_summary": "@integer-reply: the number of elements in the resulting intersection.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZINTERSTORE": {
    "summary": "Intersect multiple sorted sets and store the resulting sorted set in a new key",
    "complexity": "O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.",
    "since": "2.0.0",
    "group": "sorted_set",
    "return_summary": "@integer-reply: the number of elements in the resulting sorted set at\n`destination`.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "destination",
        "type": "key"
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "multiple": true
      },
      {
        "command": "WEIGHTS",
        "name": "weight",
        "type": "integer",
        "variadic": true,
        "optional": true
      },
      {
        "command": "AGGREGATE",
        "name": "aggregate",
        "type": "enum",
        "enum": [
          "SUM",
          "MIN",
          "MAX"
        ],
        "optional": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "sortedset",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "ZLEXCOUNT": {
    "summary": "Count the number of members in a sorted set between a given lexicographical range",
    "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
    "since": "2.8.9",
    "group": "sorted_set",
    "return_summary": "@integer-reply: the number of elements in the specified score range.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "min",
        "type": "string"
      },
      {
        "name": "max",
        "type": "string"
      }
    ],
    "arity": 4,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZPOPMAX": {
    "summary": "Remove and return members with the highest scores in a sorted set",
    "complexity": "O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.",
    "since": "5.0.0",
    "group": "sorted_set",
    "return_summary": "@array-reply: list of popped elements and scores.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "sortedset",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "ZPOPMIN": {
    "summary": "Remove and return members with the lowest scores in a sorted set",
    "complexity": "O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.",
    "since": "5.0.0",
    "group": "sorted_set",
    "return_summary": "@array-reply: list of popped elements and scores.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "sortedset",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "ZRANDMEMBER": {
    "summary": "Get one or multiple random elements from a sorted set",
    "complexity": "O(N) where N is the number of elements returned",
    "since": "6.2.0",
    "group": "sorted_set",
    "return_summary": "@bulk-string-reply: without the additional `count` argument, the command returns a Bulk Reply with the randomly selected element, or `nil` when `key` does not exist.\n\n@array-reply: when the additional `count` argument is passed, the command returns an array of elements, or an empty array when `key` does not exist.\nIf the `WITHSCORES` modifier is used, the reply is a list elements and their scores from the sorted set.",
    "return_types": {
      "2": [
        "bulk-string-reply",
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "options",
        "type": "block",
        "block": [
          {
            "name": "count",
            "type": "integer"
          },
          {
            "name": "withscores",
            "type": "enum",
            "enum": [
              "WITHSCORES"
            ],
            "optional": true
          }
        ],
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only",
      "random"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZRANGESTORE": {
    "summary": "Store a range of members from sorted set into another key",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements stored into the destination key.",
    "since": "6.2.0",
    "group": "sorted_set",
    "return_summary": "@integer-reply: the number of elements in the resulting sorted set.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "dst",
        "type": "key"
      },
      {
        "name": "src",
        "type": "key"
      },
      {
        "name": "min",
        "type": "string"
      },
      {
        "name": "max",
        "type": "string"
      },
      {
        "name": "sortby",
        "type": "enum",
        "enum": [
          "BYSCORE",
          "BYLEX"
        ],
        "optional": true
      },
      {
        "name": "rev",
        "type": "enum",
        "enum": [
          "REV"
        ],
        "optional": true
      },
      {
        "command": "LIMIT",
        "name": [
          "offset",
          "count"
        ],
        "type": [
          "integer",
          "integer"
        ],
        "optional": true
      }
    ],
    "arity": -5,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "sortedset",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "ZRANGE": {
    "summary": "Return a range of members in a sorted set",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.",
    "since": "1.2.0",
    "group": "sorted_set",
    "return_summary": "@array-reply: list of elements in the specified range (optionally with\ntheir scores, in case the `WITHSCORES` option is given).",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.2",
        "Added the `REV`, `BYSCORE`, `BYLEX` and `LIMIT` options."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "min",
        "type": "string"
      },
      {
        "name": "max",
        "type": "string"
      },
      {
        "name": "sortby",
        "type": "enum",
        "enum": [
          "BYSCORE",
          "BYLEX"
        ],
        "optional": true
      },
      {
        "name": "rev",
        "type": "enum",
        "enum": [
          "REV"
        ],
        "optional": true
      },
      {
        "command": "LIMIT",
        "name": [
          "offset",
          "count"
        ],
        "type": [
          "integer",
          "integer"
        ],
        "optional": true
      },
      {
        "name": "withscores",
        "type": "enum",
        "enum": [
          "WITHSCORES"
        ],
        "optional": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZRANGEBYLEX": {
    "summary": "Return a range of members in a sorted set, by lexicographical range",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
    "since": "2.8.9",
    "group": "sorted_set",
    "return_summary": "@array-reply: list of elements in the specified score range.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "deprecated": true,
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "min",
        "type": "string"
      },
      {
        "name": "max",
        "type": "string"
      },
      {
        "command": "LIMIT",
        "name": [
          "offset",
          "count"
        ],
        "type": [
          "integer",
          "integer"
        ],
        "optional": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZREVRANGEBYLEX": {
    "summary": "Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings.",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
    "since": "2.8.9",
    "group": "sorted_set",
    "return_summary": "@array-reply: list of elements in the specified score range.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "deprecated": true,
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "max",
        "type": "string"
      },
      {
        "name": "min",
        "type": "string"
      },
      {
        "command": "LIMIT",
        "name": [
          "offset",
          "count"
        ],
        "type": [
          "integer",
          "integer"
        ],
        "optional": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZRANGEBYSCORE": {
    "summary": "Return a range of members in a sorted set, by score",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
    "since": "1.0.5",
    "group": "sorted_set",
    "return_summary": "@array-reply: list of elements in the specified score range (optionally\nwith their scores).",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "deprecated": true,
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "min",
        "type": "double"
      },
      {
        "name": "max",
        "type": "double"
      },
      {
        "name": "withscores",
        "type": "enum",
        "enum": [
          "WITHSCORES"
        ],
        "optional": true
      },
      {
        "command": "LIMIT",
        "name": [
          "offset",
          "count"
        ],
        "type": [
          "integer",
          "integer"
        ],
        "optional": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZRANK": {
    "summary": "Determine the index of a member in a sorted set",
    "complexity": "O(log(N))",
    "since": "2.0.0",
    "group": "sorted_set",
    "return_summary": "* If `member` exists in the sorted set, @integer-reply: the rank of `member`.\n* If `member` does not exist in the sorted set or `key` does not exist,\n  @bulk-string-reply: `nil`.",
    "return_types": {
      "2": [
        "integer-reply",
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "member",
        "type": "string"
      }
    ],
    "arity": 3,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZREM": {
    "summary": "Remove one or more members from a sorted set",
    "complexity": "O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.",
    "since": "1.2.0",
    "group": "sorted_set",
    "return_summary": "@integer-reply, specifically:\n\n* The number of members removed from the sorted set, not including non existing\n  members.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "2.4",
        "Accepts multiple elements."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "member",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "sortedset",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "ZREMRANGEBYLEX": {
    "summary": "Remove all members in a sorted set between the given lexicographical range",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.",
    "since": "2.8.9",
    "group": "sorted_set",
    "return_summary": "@integer-reply: the number of elements removed.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "min",
        "type": "string"
      },
      {
        "name": "max",
        "type": "string"
      }
    ],
    "arity": 4,
    "command_flags": [
      "write"
    ],
    "acl_categories": [
      "sortedset",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "ZREMRANGEBYRANK": {
    "summary": "Remove all members in a sorted set within the given indexes",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.",
    "since": "2.0.0",
    "group": "sorted_set",
    "return_summary": "@integer-reply: the number of elements removed.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "start",
        "type": "integer"
      },
      {
        "name": "stop",
        "type": "integer"
      }
    ],
    "arity": 4,
    "command_flags": [
      "write"
    ],
    "acl_categories": [
      "sortedset",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "ZREMRANGEBYSCORE": {
    "summary": "Remove all members in a sorted set within the given scores",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.",
    "since": "1.2.0",
    "group": "sorted_set",
    "return_summary": "@integer-reply: the number of elements removed.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "min",
        "type": "double"
      },
      {
        "name": "max",
        "type": "double"
      }
    ],
    "arity": 4,
    "command_flags": [
      "write"
    ],
    "acl_categories": [
      "sortedset",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "ZREVRANGE": {
    "summary": "Return a range of members in a sorted set, by index, with scores ordered from high to low",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.",
    "since": "1.2.0",
    "group": "sorted_set",
    "return_summary": "@array-reply: list of elements in the specified range (optionally with\ntheir scores).",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "deprecated": true,
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "start",
        "type": "integer"
      },
      {
        "name": "stop",
        "type": "integer"
      },
      {
        "name": "withscores",
        "type": "enum",
        "enum": [
          "WITHSCORES"
        ],
        "optional": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZREVRANGEBYSCORE": {
    "summary": "Return a range of members in a sorted set, by score, with scores ordered from high to low",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
    "since": "2.2.0",
    "group": "sorted_set",
    "return_summary": "@array-reply: list of elements in the specified score range (optionally\nwith their scores).",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "deprecated": true,
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "max",
        "type": "double"
      },
      {
        "name": "min",
        "type": "double"
      },
      {
        "name": "withscores",
        "type": "enum",
        "enum": [
          "WITHSCORES"
        ],
        "optional": true
      },
      {
        "command": "LIMIT",
        "name": [
          "offset",
          "count"
        ],
        "type": [
          "integer",
          "integer"
        ],
        "optional": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZREVRANK": {
    "summary": "Determine the index of a member in a sorted set, with scores ordered from high to low",
    "complexity": "O(log(N))",
    "since": "2.0.0",
    "group": "sorted_set",
    "return_summary": "* If `member` exists in the sorted set, @integer-reply: the rank of `member`.\n* If `member` does not exist in the sorted set or `key` does not exist,\n  @bulk-string-reply: `nil`.",
    "return_types": {
      "2": [
        "integer-reply",
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "member",
        "type": "string"
      }
    ],
    "arity": 3,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZSCORE": {
    "summary": "Get the score associated with the given member in a sorted set",
    "complexity": "O(1)",
    "since": "1.2.0",
    "group": "sorted_set",
    "return_summary": "@bulk-string-reply: the score of `member` (a double precision floating point number),\nrepresented as string.",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "member",
        "type": "string"
      }
    ],
    "arity": 3,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZUNION": {
    "summary": "Add multiple sorted sets",
    "complexity": "O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.",
    "since": "6.2.0",
    "group": "sorted_set",
    "return_summary": "@array-reply: the result of union (optionally with their scores, in case \nthe `WITHSCORES` option is given).",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "multiple": true
      },
      {
        "command": "WEIGHTS",
        "name": "weight",
        "type": "integer",
        "variadic": true,
        "optional": true
      },
      {
        "command": "AGGREGATE",
        "name": "aggregate",
        "type": "enum",
        "enum": [
          "SUM",
          "MIN",
          "MAX"
        ],
        "optional": true
      },
      {
        "name": "withscores",
        "type": "enum",
        "enum": [
          "WITHSCORES"
        ],
        "optional": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZMSCORE": {
    "summary": "Get the score associated with the given members in a sorted set",
    "complexity": "O(N) where N is the number of members being requested.",
    "since": "6.2.0",
    "group": "sorted_set",
    "return_summary": "@array-reply: list of scores or `nil` associated with the specified `member` values (a double precision floating point number),\nrepresented as strings.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "member",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZUNIONSTORE": {
    "summary": "Add multiple sorted sets and store the resulting sorted set in a new key",
    "complexity": "O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.",
    "since": "2.0.0",
    "group": "sorted_set",
    "return_summary": "@integer-reply: the number of elements in the resulting sorted set at\n`destination`.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "destination",
        "type": "key"
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "multiple": true
      },
      {
        "command": "WEIGHTS",
        "name": "weight",
        "type": "integer",
        "variadic": true,
        "optional": true
      },
      {
        "command": "AGGREGATE",
        "name": "aggregate",
        "type": "enum",
        "enum": [
          "SUM",
          "MIN",
          "MAX"
        ],
        "optional": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "sortedset",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "SCAN": {
    "summary": "Incrementally iterate the keys space",
    "complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.",
    "since": "2.8.0",
    "group": "generic",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "cursor",
        "type": "integer"
      },
      {
        "command": "MATCH",
        "name": "pattern",
        "type": "pattern",
        "optional": true
      },
      {
        "command": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      },
      {
        "command": "TYPE",
        "name": "type",
        "type": "string",
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only",
      "random"
    ],
    "acl_categories": [
      "keyspace",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "SSCAN": {
    "summary": "Incrementally iterate Set elements",
    "complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..",
    "since": "2.8.0",
    "group": "set",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "cursor",
        "type": "integer"
      },
      {
        "command": "MATCH",
        "name": "pattern",
        "type": "pattern",
        "optional": true
      },
      {
        "command": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "read-only",
      "random"
    ],
    "acl_categories": [
      "set",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "HSCAN": {
    "summary": "Incrementally iterate hash fields and associated values",
    "complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..",
    "since": "2.8.0",
    "group": "hash",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "cursor",
        "type": "integer"
      },
      {
        "command": "MATCH",
        "name": "pattern",
        "type": "pattern",
        "optional": true
      },
      {
        "command": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "read-only",
      "random"
    ],
    "acl_categories": [
      "hash",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "ZSCAN": {
    "summary": "Incrementally iterate sorted sets elements and associated scores",
    "complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..",
    "since": "2.8.0",
    "group": "sorted_set",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "cursor",
        "type": "integer"
      },
      {
        "command": "MATCH",
        "name": "pattern",
        "type": "pattern",
        "optional": true
      },
      {
        "command": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "read-only",
      "random"
    ],
    "acl_categories": [
      "sortedset",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "XINFO": {
    "summary": "Get information on streams and consumer groups",
    "complexity": "O(N) with N being the number of returned items for the subcommands CONSUMERS and GROUPS. The STREAM subcommand is O(log N) with N being the number of items in the stream.",
    "since": "5.0.0",
    "group": "stream",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.0.0",
        "Added the `FULL` option to `XINFO STREAM`."
      ]
    ],
    "arguments": [
      {
        "command": "CONSUMERS",
        "name": [
          "key",
          "groupname"
        ],
        "type": [
          "key",
          "string"
        ],
        "optional": true
      },
      {
        "command": "GROUPS",
        "name": "key",
        "type": "key",
        "optional": true
      },
      {
        "command": "STREAM",
        "name": "key",
        "type": "key",
        "optional": true
      },
      {
        "name": "help",
        "type": "enum",
        "enum": [
          "HELP"
        ],
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "read-only",
      "random"
    ],
    "acl_categories": [
      "stream",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "count": -1,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "XADD": {
    "summary": "Appends a new entry to a stream",
    "complexity": "O(1) when adding a new entry, O(N) when trimming where N being the number of entires evicted.",
    "since": "5.0.0",
    "group": "stream",
    "return_summary": "@bulk-string-reply, specifically:\n\nThe command returns the ID of the added entry. The ID is the one auto-generated\nif `*` is passed as ID argument, otherwise the command just returns the same ID\nspecified by the user during insertion.\n\nThe command returns a @nil-reply when used with the `NOMKSTREAM` option and the\nkey doesn't exist.",
    "return_types": {
      "2": [
        "bulk-string-reply",
        "nil-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.2",
        "Added the `NOMKSTREAM` option, `MINID` trimming strategy and the `LIMIT` option."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "command": "NOMKSTREAM",
        "type": "command",
        "optional": true
      },
      {
        "name": "trim",
        "type": "block",
        "optional": true,
        "block": [
          {
            "name": "strategy",
            "type": "enum",
            "enum": [
              "MAXLEN",
              "MINID"
            ]
          },
          {
            "name": "operator",
            "type": "enum",
            "enum": [
              "=",
              "~"
            ],
            "optional": true
          },
          {
            "name": "threshold",
            "type": "string"
          },
          {
            "command": "LIMIT",
            "name": "count",
            "type": "integer",
            "optional": true
          }
        ]
      },
      {
        "type": "enum",
        "enum": [
          "*",
          "ID"
        ]
      },
      {
        "name": [
          "field",
          "value"
        ],
        "type": [
          "string",
          "string"
        ],
        "multiple": true
      }
    ],
    "arity": -5,
    "command_flags": [
      "write",
      "use-memory",
      "fast",
      "random"
    ],
    "acl_categories": [
      "stream",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "XTRIM": {
    "summary": "Trims the stream to (approximately if '~' is passed) a certain size",
    "complexity": "O(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation.",
    "since": "5.0.0",
    "group": "stream",
    "return_summary": "@integer-reply: The number of entries deleted from the stream.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.2",
        "Added the `MINID` trimming strategy and the `LIMIT` option."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "trim",
        "type": "block",
        "block": [
          {
            "name": "strategy",
            "type": "enum",
            "enum": [
              "MAXLEN",
              "MINID"
            ]
          },
          {
            "name": "operator",
            "type": "enum",
            "enum": [
              "=",
              "~"
            ],
            "optional": true
          },
          {
            "name": "threshold",
            "type": "string"
          },
          {
            "command": "LIMIT",
            "name": "count",
            "type": "integer",
            "optional": true
          }
        ]
      }
    ],
    "arity": -4,
    "command_flags": [
      "write",
      "random"
    ],
    "acl_categories": [
      "stream",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "XDEL": {
    "summary": "Removes the specified entries from the stream. Returns the number of items actually deleted, that may be different from the number of IDs passed in case certain IDs do not exist.",
    "complexity": "O(1) for each single item to delete in the stream, regardless of the stream size.",
    "since": "5.0.0",
    "group": "stream",
    "return_summary": "@integer-reply: the number of entries actually deleted.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "ID",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "write",
      "fast"
    ],
    "acl_categories": [
      "stream",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "XRANGE": {
    "summary": "Return a range of elements in a stream, with IDs matching the specified IDs interval",
    "complexity": "O(N) with N being the number of elements being returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).",
    "since": "5.0.0",
    "group": "stream",
    "return_summary": "@array-reply, specifically:\n\nThe command returns the entries with IDs matching the specified range.\nThe returned entries are complete, that means that the ID and all the fields\nthey are composed are returned. Moreover, the entries are returned with\ntheir fields and values in the exact same order as `XADD` added them.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "start",
        "type": "string"
      },
      {
        "name": "end",
        "type": "string"
      },
      {
        "command": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "stream",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "XREVRANGE": {
    "summary": "Return a range of elements in a stream, with IDs matching the specified IDs interval, in reverse order (from greater to smaller IDs) compared to XRANGE",
    "complexity": "O(N) with N being the number of elements returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).",
    "since": "5.0.0",
    "group": "stream",
    "return_summary": "@array-reply, specifically:\n\nThe command returns the entries with IDs matching the specified range,\nfrom the higher ID to the lower ID matching.\nThe returned entries are complete, that means that the ID and all the fields\nthey are composed are returned. Moreover the entries are returned with\ntheir fields and values in the exact same order as `XADD` added them.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "end",
        "type": "string"
      },
      {
        "name": "start",
        "type": "string"
      },
      {
        "command": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "stream",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "XLEN": {
    "summary": "Return the number of entries in a stream",
    "complexity": "O(1)",
    "since": "5.0.0",
    "group": "stream",
    "return_summary": "@integer-reply: the number of entries of the stream at `key`.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      }
    ],
    "arity": 2,
    "command_flags": [
      "read-only",
      "fast"
    ],
    "acl_categories": [
      "stream",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "XREAD": {
    "summary": "Return never seen elements in multiple streams, with IDs greater than the ones reported by the caller for each stream. Can block.",
    "complexity": "For each stream mentioned: O(N) with N being the number of elements being returned, it means that XREAD-ing with a fixed COUNT is O(1). Note that when the BLOCK option is used, XADD will pay O(M) time in order to serve the M clients blocked on the stream getting new data.",
    "since": "5.0.0",
    "group": "stream",
    "return_summary": "@array-reply, specifically:\n\nThe command returns an array of results: each element of the returned\narray is an array composed of a two element containing the key name and\nthe entries reported for that key. The entries reported are full stream\nentries, having IDs and the list of all the fields and values. Field and\nvalues are guaranteed to be reported in the same order they were added\nby `XADD`.\n\nWhen **BLOCK** is used, on timeout a null reply is returned.\n\nReading the [Redis Streams introduction](/topics/streams-intro) is highly\nsuggested in order to understand more about the streams overall behavior\nand semantics.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "command": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      },
      {
        "command": "BLOCK",
        "name": "milliseconds",
        "type": "integer",
        "optional": true
      },
      {
        "name": "streams",
        "type": "enum",
        "enum": [
          "STREAMS"
        ]
      },
      {
        "name": "key",
        "type": "key",
        "multiple": true
      },
      {
        "name": "ID",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "read-only"
    ],
    "acl_categories": [
      "stream",
      "blocking",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "XGROUP": {
    "summary": "Create, destroy, and manage consumer groups.",
    "complexity": "O(1) for all the subcommands, with the exception of the DESTROY subcommand which takes an additional O(M) time in order to delete the M entries inside the consumer group pending entries list (PEL).",
    "since": "5.0.0",
    "group": "stream",
    "return_summary": "<summary>",
    "return_types": {
      "2": [],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "create",
        "type": "block",
        "block": [
          {
            "command": "CREATE",
            "name": [
              "key",
              "groupname"
            ],
            "type": [
              "key",
              "string"
            ]
          },
          {
            "name": "id",
            "type": "enum",
            "enum": [
              "ID",
              "$"
            ]
          },
          {
            "command": "MKSTREAM",
            "type": "command",
            "optional": true
          }
        ],
        "optional": true
      },
      {
        "name": "setid",
        "type": "block",
        "block": [
          {
            "command": "SETID",
            "name": [
              "key",
              "groupname"
            ],
            "type": [
              "key",
              "string"
            ]
          },
          {
            "name": "id",
            "type": "enum",
            "enum": [
              "ID",
              "$"
            ]
          }
        ],
        "optional": true
      },
      {
        "command": "DESTROY",
        "name": [
          "key",
          "groupname"
        ],
        "type": [
          "key",
          "string"
        ],
        "optional": true
      },
      {
        "command": "CREATECONSUMER",
        "name": [
          "key",
          "groupname",
          "consumername"
        ],
        "type": [
          "key",
          "string",
          "string"
        ],
        "optional": true
      },
      {
        "command": "DELCONSUMER",
        "name": [
          "key",
          "groupname",
          "consumername"
        ],
        "type": [
          "key",
          "string",
          "string"
        ],
        "optional": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "write",
      "use-memory"
    ],
    "acl_categories": [
      "stream",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "count": -1,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "XREADGROUP": {
    "summary": "Return new entries from a stream using a consumer group, or access the history of the pending entries for a given consumer. Can block.",
    "complexity": "For each stream mentioned: O(M) with M being the number of elements returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1). On the other side when XREADGROUP blocks, XADD will pay the O(N) time in order to serve the N clients blocked on the stream getting new data.",
    "since": "5.0.0",
    "group": "stream",
    "return_summary": "@array-reply, specifically:\n\nThe command returns an array of results: each element of the returned\narray is an array composed of a two element containing the key name and\nthe entries reported for that key. The entries reported are full stream\nentries, having IDs and the list of all the fields and values. Field and\nvalues are guaranteed to be reported in the same order they were added\nby `XADD`.\n\nWhen **BLOCK** is used, on timeout a null reply is returned.\n\nReading the [Redis Streams introduction](/topics/streams-intro) is highly\nsuggested in order to understand more about the streams overall behavior\nand semantics.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "command": "GROUP",
        "name": [
          "group",
          "consumer"
        ],
        "type": [
          "string",
          "string"
        ]
      },
      {
        "command": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      },
      {
        "command": "BLOCK",
        "name": "milliseconds",
        "type": "integer",
        "optional": true
      },
      {
        "name": "noack",
        "type": "enum",
        "enum": [
          "NOACK"
        ],
        "optional": true
      },
      {
        "name": "streams",
        "type": "enum",
        "enum": [
          "STREAMS"
        ]
      },
      {
        "name": "key",
        "type": "key",
        "multiple": true
      },
      {
        "name": "ID",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -7,
    "command_flags": [
      "write"
    ],
    "acl_categories": [
      "stream",
      "blocking",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "XACK": {
    "summary": "Marks a pending message as correctly processed, effectively removing it from the pending entries list of the consumer group. Return value of the command is the number of messages successfully acknowledged, that is, the IDs we were actually able to resolve in the PEL.",
    "complexity": "O(1) for each message ID processed.",
    "since": "5.0.0",
    "group": "stream",
    "return_summary": "@integer-reply, specifically:\n\nThe command returns the number of messages successfully acknowledged.\nCertain message IDs may no longer be part of the PEL (for example because\nthey have already been acknowledged), and XACK will not count them as\nsuccessfully acknowledged.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "group",
        "type": "string"
      },
      {
        "name": "ID",
        "type": "string",
        "multiple": true
      }
    ],
    "arity": -4,
    "command_flags": [
      "write",
      "fast",
      "random"
    ],
    "acl_categories": [
      "stream",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "XCLAIM": {
    "summary": "Changes (or acquires) ownership of a message in a consumer group, as if the message was delivered to the specified consumer.",
    "complexity": "O(log N) with N being the number of messages in the PEL of the consumer group.",
    "since": "5.0.0",
    "group": "stream",
    "return_summary": "@array-reply, specifically:\n\nThe command returns all the messages successfully claimed, in the same format\nas `XRANGE`. However if the `JUSTID` option was specified, only the message\nIDs are reported, without including the actual message.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "group",
        "type": "string"
      },
      {
        "name": "consumer",
        "type": "string"
      },
      {
        "name": "min-idle-time",
        "type": "string"
      },
      {
        "name": "ID",
        "type": "string",
        "multiple": true
      },
      {
        "command": "IDLE",
        "name": "ms",
        "type": "integer",
        "optional": true
      },
      {
        "command": "TIME",
        "name": "ms-unix-time",
        "type": "integer",
        "optional": true
      },
      {
        "command": "RETRYCOUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      },
      {
        "name": "force",
        "type": "enum",
        "enum": [
          "FORCE"
        ],
        "optional": true
      },
      {
        "name": "justid",
        "type": "enum",
        "enum": [
          "JUSTID"
        ],
        "optional": true
      }
    ],
    "arity": -6,
    "command_flags": [
      "write",
      "random",
      "fast"
    ],
    "acl_categories": [
      "stream",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "XAUTOCLAIM": {
    "summary": "Changes (or acquires) ownership of messages in a consumer group, as if the messages were delivered to the specified consumer.",
    "complexity": "O(1) if COUNT is small.",
    "since": "6.2.0",
    "group": "stream",
    "return_summary": "@array-reply, specifically:\n\nAn array with two elements:\n\n1. The first element is a stream ID to be used as the `<start>` argument for the next call to `XAUTOCLAIM`\n2. The second element is an array containing all the successfully claimed messages in the same format as `XRANGE`.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "group",
        "type": "string"
      },
      {
        "name": "consumer",
        "type": "string"
      },
      {
        "name": "min-idle-time",
        "type": "string"
      },
      {
        "name": "start",
        "type": "string"
      },
      {
        "command": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      },
      {
        "name": "justid",
        "type": "enum",
        "enum": [
          "JUSTID"
        ],
        "optional": true
      }
    ],
    "arity": -6,
    "command_flags": [
      "write",
      "random",
      "fast"
    ],
    "acl_categories": [
      "stream",
      "write",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "write"
        ]
      }
    ]
  },
  "XPENDING": {
    "summary": "Return information and entries from a stream consumer group pending entries list, that are messages fetched but never acknowledged.",
    "complexity": "O(N) with N being the number of elements returned, so asking for a small fixed number of entries per call is O(1). O(M), where M is the total number of entries scanned when used with the IDLE filter. When the command returns just the summary and the list of consumers is small, it runs in O(1) time; otherwise, an additional O(N) time for iterating every consumer.",
    "since": "5.0.0",
    "group": "stream",
    "return_summary": "@array-reply, specifically:\n\nThe command returns data in different format depending on the way it is\ncalled, as previously explained in this page. However the reply is always\nan array of items.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "history": [
      [
        "6.2.0",
        "Added the `IDLE` option and exclusive range intervals."
      ]
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key"
      },
      {
        "name": "group",
        "type": "string"
      },
      {
        "type": "block",
        "name": "filters",
        "block": [
          {
            "command": "IDLE",
            "name": "min-idle-time",
            "type": "integer",
            "optional": true
          },
          {
            "name": "start",
            "type": "string"
          },
          {
            "name": "end",
            "type": "string"
          },
          {
            "name": "count",
            "type": "integer"
          },
          {
            "name": "consumer",
            "type": "string",
            "optional": true
          }
        ],
        "optional": true
      }
    ],
    "arity": -3,
    "command_flags": [
      "read-only",
      "random"
    ],
    "acl_categories": [
      "stream",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 1,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "LATENCY DOCTOR": {
    "summary": "Return a human readable latency analysis report.",
    "complexity": "TBD",
    "since": "2.8.13",
    "group": "server",
    "return_summary": "@bulk-string-reply",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "LATENCY GRAPH": {
    "summary": "Return a latency graph for the event.",
    "complexity": "TBD",
    "since": "2.8.13",
    "group": "server",
    "return_summary": "@bulk-string-reply",
    "return_types": {
      "2": [
        "bulk-string-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "event",
        "type": "string"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "LATENCY HISTORY": {
    "summary": "Return timestamp-latency samples for the event.",
    "complexity": "TBD",
    "since": "2.8.13",
    "group": "server",
    "return_summary": "@array-reply: specifically:\n\nThe command returns an array where each element is a two elements array\nrepresenting the timestamp and the latency of the event.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "event",
        "type": "string"
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "LATENCY LATEST": {
    "summary": "Return the latest latency samples for all events.",
    "complexity": "TBD",
    "since": "2.8.13",
    "group": "server",
    "return_summary": "@array-reply: specifically:\n\nThe command returns an array where each element is a four elements array\nrepresenting the event's name, timestamp, latest and all-time latency measurements.",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "LATENCY RESET": {
    "summary": "Reset latency data for one or more events.",
    "complexity": "TBD",
    "since": "2.8.13",
    "group": "server",
    "return_summary": "@integer-reply: the number of event time series that were reset.",
    "return_types": {
      "2": [
        "integer-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arguments": [
      {
        "name": "event",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  },
  "LATENCY HELP": {
    "summary": "Show helpful text about the different subcommands.",
    "complexity": "TBD",
    "since": "2.8.13",
    "group": "server",
    "return_summary": "@array-reply: a list of subcommands and their descriptions",
    "return_types": {
      "2": [
        "array-reply"
      ],
      "3": [
        "simple-string-reply"
      ]
    },
    "arity": -2,
    "command_flags": [
      "admin",
      "no-script",
      "ok-loading",
      "ok-stale"
    ],
    "acl_categories": [
      "admin",
      "dangerous",
      "slow"
    ],
    "key_specs": [
      {
        "start_search": {
          "index": {
            "pos": 0
          }
        },
        "find_keys": {
          "range": {
            "count": 0,
            "step": 0,
            "limit": 0
          }
        },
        "flags": [
          "read"
        ]
      }
    ]
  }
}